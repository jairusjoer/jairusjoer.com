{
  "items": [
    {
      "creator": "Jairus Joer",
      "title": "Delightful Animations II: Tiles",
      "link": "https://aggregata.de/delightful-animations-ii-tiles/",
      "pubDate": "Mon, 04 Aug 2025 18:00:27 GMT",
      "content:encoded": "<figure class=\"kg-card kg-bookmark-card kg-card-hascaption\"><a class=\"kg-bookmark-container\" href=\"https://aggregata.de/exploring-delightful-animations-i-gallery/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Delightful Animations I: Gallery</div><div class=\"kg-bookmark-description\">Explore how to implement smooth horizontal gallery scrolling animations using GSAP to create engaging visual experiences for image galleries and content carousels</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/favicon-2.svg\" alt=\"Delightful Animations II: Tiles\"><span class=\"kg-bookmark-author\">Aggregata</span><span class=\"kg-bookmark-publisher\">Jairus Joer</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/2024.05.26-1.png\" alt=\"Delightful Animations II: Tiles\" onerror=\"this.style.display = &apos;none&apos;\"></div></a><figcaption><img src=\"https://aggregata.de/content/images/2025/08/2025.08.04-2.png\" alt=\"Delightful Animations II: Tiles\"><p><span style=\"white-space: pre-wrap;\">Read more about animations in the previous issue of this series.</span></p></figcaption></figure><hr><h2 id=\"what-well-craft\">What we&apos;ll craft</h2><p>This issue only scratches the surface of data visualization techniques that I&apos;d like to explore further at some point. Since this territory is new to me&#x2014;and perhaps to you as well&#x2014;consider this article more of a training than a tutorial.</p><p>Today, we&apos;ll craft data tiles. They are small, contained units of information that highlight or contain key metrics or achievements in the presented context. They are a simple yet elegant element that fits nicely into decks and hero sections.</p><figure class=\"kg-card kg-video-card kg-width-regular\" data-kg-thumbnail=\"https://aggregata.de/content/media/2025/08/tile-1_thumb.jpg\" data-kg-custom-thumbnail>\n            <div class=\"kg-video-container\">\n                <video src=\"https://aggregata.de/content/media/2025/08/tile-1.mp4\" poster=\"https://img.spacergif.org/v1/1728x1080/0a/spacer.png\" width=\"1728\" height=\"1080\" loop autoplay muted playsinline preload=\"metadata\" style=\"background: transparent url(&apos;https://aggregata.de/content/media/2025/08/tile-1_thumb.jpg&apos;) 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"/>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container kg-video-hide\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"/>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"/>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:03</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1&#xD7;</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"/>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            \n        </figure>",
      "content:encodedSnippet": "Delightful Animations I: Gallery\nExplore how to implement smooth horizontal gallery scrolling animations using GSAP to create engaging visual experiences for image galleries and content carousels\nAggregataJairus Joer\n\n\n\nRead more about animations in the previous issue of this series.\n\nWhat we'll craft\nThis issue only scratches the surface of data visualization techniques that I'd like to explore further at some point. Since this territory is new to me—and perhaps to you as well—consider this article more of a training than a tutorial.\nToday, we'll craft data tiles. They are small, contained units of information that highlight or contain key metrics or achievements in the presented context. They are a simple yet elegant element that fits nicely into decks and hero sections.\n\n            \n\n                \n0:00\n                        \n0:03\n                        \n1×",
      "dc:creator": "Jairus Joer",
      "content": "Next in our series are simple yet beautifully animated data visualization tiles. Today, we're exploring how to create and customize them with Anime.js.",
      "contentSnippet": "Next in our series are simple yet beautifully animated data visualization tiles. Today, we're exploring how to create and customize them with Anime.js.",
      "guid": "6833262942a51d00017475d7",
      "categories": [
        "Javascript",
        "Animation",
        "Design",
        "Web"
      ],
      "isoDate": "2025-08-04T18:00:27.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Visiting the WeAreDevelopers World Congress 2025",
      "link": "https://aggregata.de/visiting-the-wearedevelopers-world-congress-2025/",
      "pubDate": "Mon, 21 Jul 2025 11:00:21 GMT",
      "content:encoded": "<figure class=\"kg-card kg-bookmark-card kg-card-hascaption\"><a class=\"kg-bookmark-container\" href=\"https://aggregata.de/visiting-the-wearedevelopers-world-congress-2024/\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Visiting the WeAreDevelopers World Congress 2024</div><div class=\"kg-bookmark-description\">Last week I had the privliege to spend three days in Berlin with my employer HERO Software at the WeAreDevelopers World Congress 2024. It was a great opportunity to learn from and network with other developers.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/favicon.svg\" alt=\"Visiting the WeAreDevelopers World Congress 2025\"><span class=\"kg-bookmark-author\">Aggregata</span><span class=\"kg-bookmark-publisher\">Jairus Joer</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/cover-2.png\" alt=\"Visiting the WeAreDevelopers World Congress 2025\" onerror=\"this.style.display = &apos;none&apos;\"></div></a><figcaption><img src=\"https://aggregata.de/content/images/2025/07/2025.07.21.png\" alt=\"Visiting the WeAreDevelopers World Congress 2025\"><p><i><em class=\"italic\" style=\"white-space: pre-wrap;\">Read more about my attendance at the previous event</em></i></p></figcaption></figure><hr><h2 id=\"wednesday\">Wednesday</h2><p>As I did last year, I arrived on Wednesday to take part in the pre-check-in event. Shortly before the event itself, we visited a local Latin American restaurant in preparation for the evening ahead, which featured events organised by CARIAD and other hosts.</p>\n<!--kg-card-begin: html-->\n<table>\n  <thead>\n    <tr>\n        <th>Time</th>\n        <th>Session</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>17:00 &#x2013; 19:30</td>\n      <td>Visit to the Latin American restaurant Paracas II</td>\n    </tr>\n    <tr>\n        <td style=\"white-space: nowrap\">19:30 &#x2013; 21:30</td>\n        <td>Check-in &amp; Badge Pickup powered by CARIAD @Volkswagen DRIVE.studio</td>\n    </tr>\n  </tbody>\n</table>\n\n<!--kg-card-end: html-->\n<figure class=\"kg-card kg-image-card\"><img src=\"https://aggregata.de/content/images/2025/07/image-2.png\" class=\"kg-image\" alt=\"Visiting the WeAreDevelopers World Congress 2025\" loading=\"lazy\" width=\"720\" height=\"405\" srcset=\"https://aggregata.de/content/images/size/w600/2025/07/image-2.png 600w, https://aggregata.de/content/images/2025/07/image-2.png 720w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"thursday\">Thursday</h2><p>As usual, Thursday marked the opening day of the congress, featuring a keynote by GitHub&apos;s CEO, Thomas Dohmke, who attempted to demonstrate the improved capabilities of GitHub Copilot. Rather amusingly, this demonstration did not go as smoothly as expected, however.</p><p>This year, I am focusing on a mix of holistic and in-depth topics in order to strike a balance between leadership and developer experience, and to develop my capabilities further in line with my promotion to a senior engineering position.</p>\n<!--kg-card-begin: html-->\n<table>\n    <thead>\n        <tr>\n            <th>&#x2605;</th>\n            <th>Time</th>\n            <th>Session</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td>09:15 &#x2013; 09:30</td>\n            <td>Official Opening of WeAreDevelopers World Congress 2025</td>\n        </tr>\n        <tr>\n            <td></td>\n            <td>09:30 &#x2013; 10:00</td>\n            <td>Agents for the Sake of Happiness</td>\n        </tr>\n        <tr>\n            <td></td>\n            <td>10:10 &#x2013; 10:40</td>\n            <td>Optimistic UI Updates: Enhancing User Experience and Improving Interaction to Next Paint (INP)</td>\n        </tr>\n        <tr>\n            <td></td>\n            <td>10:50 &#x2013; 11:20</td>\n            <td>How Visionary Leaders Drive Transformation</td>\n        </tr>\n        <tr>\n            <td>&#x2605;</td>\n            <td>11:30 &#x2013; 12:00</td>\n            <td>Web-Fragments: incremental micro-frontends migration approach for enterprise</td>\n        </tr>\n        <tr>\n            <td>&#x2605;</td>\n            <td>13:15 &#x2013; 13:20</td>\n            <td>ShapeShift: Reinventing Agile for a B2B SaaS Scale-Up</td>\n        </tr>\n        <tr>\n            <td></td>\n            <td>15:30 &#x2013; 16:00</td>\n            <td>The future of Stack Overflow as the most vital source for technologists</td>\n        </tr>\n        <tr>\n            <td>&#x2605;</td>\n            <td>16:10 &#x2013; 16:40</td>\n            <td>Possibilities with Web Capabilities</td>\n        </tr>\n        <tr>\n            <td></td>\n            <td>16:50 &#x2013; 17:20</td>\n            <td>Videogames: The Medium of the 21st Century</td>\n        </tr>\n        <tr>\n            <td></td>\n            <td>17:30 &#x2013; 18:00</td>\n            <td>From Vision To Victory - What It Takes to Succeed in Tech Today</td>\n        </tr>\n        <tr>\n            <td></td>          \n            <td style=\"white-space: nowrap\">20:00 &#x2013; 22:00</td>\n            <td>Official Congress Party powered by WeAreDevelopers</td>\n        </tr>\n    </tbody>\n</table>\n<!--kg-card-end: html-->\n<p>Unlike last year, this time I will summarise my favourite sessions from each day and share what I learnt from each one. As my last article was rather superficial, I expect this one to be more valuable.</p><h3 id=\"web-fragments-incremental-micro-frontends-migration-approach-for-enterprise\"><a href=\"https://www.youtube.com/watch?v=WD-KkXAJY_U&amp;ref=aggregata.de\">Web-Fragments: incremental micro-frontends migration approach for enterprise</a></h3><p>This session helped me to bridge the gaps that I have been exploring in recent weeks regarding monoliths for my article series, &apos;<a href=\"https://aggregata.de/migrating-the-monolith-i-conceptualization/\" rel=\"noreferrer\"><em>Migrating the Monolith</em></a>&apos;, as well as helping me to develop a concept for decoupling frontends and easing migration into new stacks for existing applications.</p><h3 id=\"possibilities-with-web-capabilities\"><a href=\"https://www.youtube.com/watch?v=MlNccgqSzbQ&amp;ref=aggregata.de\">Possibilities with Web Capabilities</a></h3><p>As an <a href=\"https://aggregata.de/the-future-of-the-web-might-be-native/\" rel=\"noreferrer\">advocate of native web capabilities</a>, I found this session particularly enlightening. It broadened my understanding of the offerings available and reaffirmed my belief that it provides a practical and future-proof foundation for developing capable web applications.</p><h3 id=\"shapeshift-reinventing-agile-for-a-b2b-saas-scale-up\"><a href=\"https://www.youtube.com/watch?v=_AI56iglIks&amp;ref=aggregata.de\">ShapeShift: Reinventing Agile for a B2B SaaS Scale-Up</a></h3><p>Although I am biased towards this session, I would still like to point out that this session successfully condenses our current in-house approach to cycles into a brief 5-minute overview, offering a concise yet accessible insight into our processes.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://aggregata.de/content/images/2025/07/image.png\" class=\"kg-image\" alt=\"Visiting the WeAreDevelopers World Congress 2025\" loading=\"lazy\" width=\"1204\" height=\"1600\" srcset=\"https://aggregata.de/content/images/size/w600/2025/07/image.png 600w, https://aggregata.de/content/images/size/w1000/2025/07/image.png 1000w, https://aggregata.de/content/images/2025/07/image.png 1204w\" sizes=\"(min-width: 720px) 720px\"><figcaption><a href=\"https://www.linkedin.com/in/miltonleon86/?ref=aggregata.de\"><span style=\"white-space: pre-wrap;\">Milton Leon</span></a><span style=\"white-space: pre-wrap;\"> presenting </span><a href=\"https://www.youtube.com/watch?v=_AI56iglIks&amp;ref=aggregata.de\"><i><em class=\"italic\" style=\"white-space: pre-wrap;\">Reinventing Agile for a B2B SaaS Scale-Up</em></i></a></figcaption></figure><h2 id=\"friday\">Friday</h2>\n<!--kg-card-begin: html-->\n<table>\n    <thead>\n        <tr>\n            <th>&#x2605;</th>\n            <th>Time</th>\n            <th>Session</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n            <td>09:40 &#x2013; 10:10</td>\n            <td>Outsmarting the System: What Game Cheaters Can Teach Us About Cyber Security</td>\n        </tr>\n        <tr>\n            <td>&#x2605;</td>\n            <td>10:20 &#x2013; 10:50</td>\n            <td>End-to-End TypeScript: Completing the Modern Development Stack</td>\n        </tr>\n        <tr>\n            <td>&#x2605;</td>\n            <td>11:00 &#x2013; 11:30</td>\n            <td>Oh S***! There&apos;s a New Accessibility Law and I&apos;m Not Ready!</td>\n        </tr>\n        <tr>\n            <td></td>\n            <td>11:40 &#x2013; 12:10</td>\n            <td>Client-Side State Management Reimagined &#x2013; Think Outside the Box</td>\n        </tr>\n        <tr>\n            <td>&#x2605;</td>\n            <td>13:00 &#x2013; 13:30</td>\n            <td>Building Developer Experience - Brick by Brick</td>\n        </tr>\n        <tr>\n            <td></td>\n            <td style=\"white-space: nowrap\">14:20 &#x2013; 14:50</td>\n            <td>Building a framework-independent component library</td>\n        </tr>\n    </tbody>\n</table>\n<!--kg-card-end: html-->\n<h3 id=\"end-to-end-typescript-completing-the-modern-development-stack\"><a href=\"https://www.youtube.com/watch?v=G82IIetQ808&amp;ref=aggregata.de\">End-to-End TypeScript: Completing the Modern Development Stack</a></h3><p>Recently, I explored various TypeScript-based stack combinations and found some solutions to outstanding problems in this session, such as unified type definitions and validation with <a href=\"https://zod.dev/?ref=aggregata.de\" rel=\"noreferrer\">Zod</a>, and how to integrate them in an agnostic backend environment like <a href=\"https://hono.dev/?ref=aggregata.de\" rel=\"noreferrer\">Hono</a>.</p><h3 id=\"oh-s-theres-a-new-accessibility-law-and-im-not-ready\"><a href=\"https://www.youtube.com/watch?v=h03tv2oTqG4&amp;embeds_referring_origin=https%3A%2F%2Fapp.wearedevelopers.com&amp;ref=aggregata.de\">Oh S***! There&apos;s a New Accessibility Law and I&apos;m Not Ready!</a></h3><p><a href=\"https://aggregata.de/accessibility-a-necessity-not-an-afterthought/\" rel=\"noreferrer\">Accessibility is not an afterthought</a>. That has been my credo for some time now, and this talk has expanded my existing knowledge of testing approaches and tools, providing a more refined and robust foundation for future implementations internally as well as externally.</p><h3 id=\"building-developer-experiencebrick-by-brick\"><a href=\"https://www.youtube.com/watch?v=QB1gyitYUbI&amp;embeds_referring_origin=https%3A%2F%2Fapp.wearedevelopers.com&amp;ref=aggregata.de\">Building Developer Experience - Brick by Brick</a></h3><p>The LEGO Group&apos;s shift into the digital realm began decades ago with Lego Island, a favourite of mine, and has continued with an astonishing number of developers whose knowledge must be managed and preserved. They presented this in a lovingly crafted presentation to follow.</p><h2 id=\"reflection\">Reflection</h2><p>This year was different. To be completely honest, some of the talks felt rather superficial and basic, which left me feeling rather unsatisfied. Nevertheless, I managed to gain valuable insights from the sessions I marked as favourites, and I wholeheartedly recommend them.</p><p>Another difference was our presence at the congress. Our group doubled in size, we had our own booth and held a session, and we were frequently recognised by other attendees and exhibitors, most likely due to our eye-catching display of group size and colour.</p><p>Overall, I would rate this year&apos;s congress as a success, and I hope to have the privilege of attending again next year. Special thanks to my colleagues, and in particular to Lennart, for accompanying me to, from and around the congress.</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://aggregata.de/content/images/2025/07/image-1.png\" class=\"kg-image\" alt=\"Visiting the WeAreDevelopers World Congress 2025\" loading=\"lazy\" width=\"2000\" height=\"1501\" srcset=\"https://aggregata.de/content/images/size/w600/2025/07/image-1.png 600w, https://aggregata.de/content/images/size/w1000/2025/07/image-1.png 1000w, https://aggregata.de/content/images/size/w1600/2025/07/image-1.png 1600w, https://aggregata.de/content/images/2025/07/image-1.png 2048w\" sizes=\"(min-width: 720px) 720px\"><figcaption><i><em class=\"italic\" style=\"white-space: pre-wrap;\">Our beautiful group of 24+ people</em></i></figcaption></figure><h2 id=\"tldr\">TL;DR</h2><p>At WeAreDevelopers 2025, I enjoyed standout sessions on micro-frontends, additions to the modern tech stack, team development and developer experience. Despite some superficial sessions in-between, these provided meaningful takeaways.</p>",
      "content:encodedSnippet": "Visiting the WeAreDevelopers World Congress 2024\nLast week I had the privliege to spend three days in Berlin with my employer HERO Software at the WeAreDevelopers World Congress 2024. It was a great opportunity to learn from and network with other developers.\nAggregataJairus Joer\n\n\n\nRead more about my attendance at the previous event\n\nWednesday\nAs I did last year, I arrived on Wednesday to take part in the pre-check-in event. Shortly before the event itself, we visited a local Latin American restaurant in preparation for the evening ahead, which featured events organised by CARIAD and other hosts.\nTime\n        Session\n    \n17:00 – 19:30\n      Visit to the Latin American restaurant Paracas II\n    \n19:30 – 21:30\n        Check-in & Badge Pickup powered by CARIAD @Volkswagen DRIVE.studio\n    \n\nThursday\nAs usual, Thursday marked the opening day of the congress, featuring a keynote by GitHub's CEO, Thomas Dohmke, who attempted to demonstrate the improved capabilities of GitHub Copilot. Rather amusingly, this demonstration did not go as smoothly as expected, however.\nThis year, I am focusing on a mix of holistic and in-depth topics in order to strike a balance between leadership and developer experience, and to develop my capabilities further in line with my promotion to a senior engineering position.\n★\n            Time\n            Session\n        \n\n            09:15 – 09:30\n            Official Opening of WeAreDevelopers World Congress 2025\n        \n\n            09:30 – 10:00\n            Agents for the Sake of Happiness\n        \n\n            10:10 – 10:40\n            Optimistic UI Updates: Enhancing User Experience and Improving Interaction to Next Paint (INP)\n        \n\n            10:50 – 11:20\n            How Visionary Leaders Drive Transformation\n        \n★\n            11:30 – 12:00\n            Web-Fragments: incremental micro-frontends migration approach for enterprise\n        \n★\n            13:15 – 13:20\n            ShapeShift: Reinventing Agile for a B2B SaaS Scale-Up\n        \n\n            15:30 – 16:00\n            The future of Stack Overflow as the most vital source for technologists\n        \n★\n            16:10 – 16:40\n            Possibilities with Web Capabilities\n        \n\n            16:50 – 17:20\n            Videogames: The Medium of the 21st Century\n        \n\n            17:30 – 18:00\n            From Vision To Victory - What It Takes to Succeed in Tech Today\n        \n          \n            20:00 – 22:00\n            Official Congress Party powered by WeAreDevelopers\n        \nUnlike last year, this time I will summarise my favourite sessions from each day and share what I learnt from each one. As my last article was rather superficial, I expect this one to be more valuable.\nWeb-Fragments: incremental micro-frontends migration approach for enterprise\nThis session helped me to bridge the gaps that I have been exploring in recent weeks regarding monoliths for my article series, 'Migrating the Monolith', as well as helping me to develop a concept for decoupling frontends and easing migration into new stacks for existing applications.\nPossibilities with Web Capabilities\nAs an advocate of native web capabilities, I found this session particularly enlightening. It broadened my understanding of the offerings available and reaffirmed my belief that it provides a practical and future-proof foundation for developing capable web applications.\nShapeShift: Reinventing Agile for a B2B SaaS Scale-Up\nAlthough I am biased towards this session, I would still like to point out that this session successfully condenses our current in-house approach to cycles into a brief 5-minute overview, offering a concise yet accessible insight into our processes.\nMilton Leon presenting Reinventing Agile for a B2B SaaS Scale-Up\nFriday\n★\n            Time\n            Session\n        \n\n            09:40 – 10:10\n            Outsmarting the System: What Game Cheaters Can Teach Us About Cyber Security\n        \n★\n            10:20 – 10:50\n            End-to-End TypeScript: Completing the Modern Development Stack\n        \n★\n            11:00 – 11:30\n            Oh S***! There's a New Accessibility Law and I'm Not Ready!\n        \n\n            11:40 – 12:10\n            Client-Side State Management Reimagined – Think Outside the Box\n        \n★\n            13:00 – 13:30\n            Building Developer Experience - Brick by Brick\n        \n\n            14:20 – 14:50\n            Building a framework-independent component library\n        \nEnd-to-End TypeScript: Completing the Modern Development Stack\nRecently, I explored various TypeScript-based stack combinations and found some solutions to outstanding problems in this session, such as unified type definitions and validation with Zod, and how to integrate them in an agnostic backend environment like Hono.\nOh S***! There's a New Accessibility Law and I'm Not Ready!\nAccessibility is not an afterthought. That has been my credo for some time now, and this talk has expanded my existing knowledge of testing approaches and tools, providing a more refined and robust foundation for future implementations internally as well as externally.\nBuilding Developer Experience - Brick by Brick\nThe LEGO Group's shift into the digital realm began decades ago with Lego Island, a favourite of mine, and has continued with an astonishing number of developers whose knowledge must be managed and preserved. They presented this in a lovingly crafted presentation to follow.\nReflection\nThis year was different. To be completely honest, some of the talks felt rather superficial and basic, which left me feeling rather unsatisfied. Nevertheless, I managed to gain valuable insights from the sessions I marked as favourites, and I wholeheartedly recommend them.\nAnother difference was our presence at the congress. Our group doubled in size, we had our own booth and held a session, and we were frequently recognised by other attendees and exhibitors, most likely due to our eye-catching display of group size and colour.\nOverall, I would rate this year's congress as a success, and I hope to have the privilege of attending again next year. Special thanks to my colleagues, and in particular to Lennart, for accompanying me to, from and around the congress.\nOur beautiful group of 24+ people\nTL;DR\nAt WeAreDevelopers 2025, I enjoyed standout sessions on micro-frontends, additions to the modern tech stack, team development and developer experience. Despite some superficial sessions in-between, these provided meaningful takeaways.",
      "dc:creator": "Jairus Joer",
      "content": "I was once again fortunate enough to be able to attend the WeAreDevelopers World Congress 2025 in Berlin, where I had the opportunity to network with and learn from brilliant engineers and creative professionals from across the globe.",
      "contentSnippet": "I was once again fortunate enough to be able to attend the WeAreDevelopers World Congress 2025 in Berlin, where I had the opportunity to network with and learn from brilliant engineers and creative professionals from across the globe.",
      "guid": "68763d6757fddb0001e65a04",
      "categories": [
        "Personal"
      ],
      "isoDate": "2025-07-21T11:00:21.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Migrating the Monolith I: Conceptualization",
      "link": "https://aggregata.de/migrating-the-monolith-i-conceptualization/",
      "pubDate": "Mon, 09 Jun 2025 20:49:48 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><img src=\"https://aggregata.de/content/images/2025/06/2025.06.06.png\" alt=\"Migrating the Monolith I: Conceptualization\"><p>Over the past year, I have participated in several migration projects involving traditional monolithic applications. These endeavors were quite insightful, motivating me to share my experience through this new article series.</p><p>Before we begin, I&apos;d like to point out that the series is an exercise in planning and continuously publishing long-form content &#x2013; thus, the contents of this series will revolve around a fictitious application.</p><h2 id=\"defining-the-entry-point\">Defining the Entry Point</h2><p>Let&apos;s consider a monolithic application employing a popular framework like Symfony, Rails or Django. This framework handles the majority of our application business logic in the backend and is the backbone of our fictitious product.</p><p>Our frontend utilizes the framework&apos;s provided templating system and relies on a bridge for interactions between client and server. We might also expose an external API for mobile applications or external tenants to utilize.</p><p>These considerations condense into the traditional definition of a monolithic stack &#x2014; one codebase to rule them all. This architecture works well for its intended use case most of the time, as proven by time itself.</p><p>Although this structure is effective initially, it has certain architectural limitations that become apparent as complexity increases. These limitations lead to challenges such as API misalignment, difficulty with product expansion, and reduced cohesion.</p><h2 id=\"the-first-problems-appear\">The first Problems appear</h2><p>This series requires introducing the necessary crux and foundational understanding to motivate migration to a different architectural approach. To that end, we will present and analyze concrete implementations and design patterns that directly conflict with the traditional monolithic approach.</p><h3 id=\"problem-1-apis\">Problem 1: APIs</h3><p>External applications, such as mobile apps and third-party vendors, rely on an API to interact with the core application. In a monolithic architecture, the API layer often becomes tightly coupled with internal business logic, exposing implementation details rather than business capabilities.</p><p>This coupling means internal refactoring can break external integrations, and API versioning becomes complex as changes ripple through the codebase. Different external consumers requiring different data representations lead to API bloat where endpoints inefficiently serve multiple use cases.</p><h3 id=\"problem-2-products\">Problem 2: Products</h3><p>As the application grows, distinct products within the monolith begin to exhibit different scaling requirements, release cycles, and team ownership patterns. Each product may need specialized data models, unique business rules, and different performance characteristics. </p><p>However, in a monolithic architecture, all products must share the same technology stack. This creates bottlenecks where teams cannot iterate independently, leading to coordination overhead and slower feature delivery. </p><h3 id=\"problem-3-cohesion\">Problem 3: Cohesion</h3><p>As the application expands to serve multiple products, the codebase develops inappropriate coupling between unrelated business domains. Teams inadvertently create shared utilities and services that become tightly coupled across product boundaries, making changes risky and testing complex. </p><p>The shared database becomes a bottleneck where schema changes require coordination across all teams. Additionally, UI components become overly generic to accommodate different product requirements, resulting in suboptimal user experiences and harder-to-maintain frontend code.</p><p>This creates a situation where business logic that should be cohesive within product boundaries becomes scattered across shared components, while unrelated products become coupled through these shared dependencies.</p><!--members-only--><h2 id=\"a-fork-in-the-road-opens-up\">A fork in the Road opens up</h2><p>We&apos;re faced with a strategic decision that will determine the future scalability and maintainability of our application. Before making this choice, we need to evaluate concrete evidence from our current situation.</p><h3 id=\"current-pain-points-analysis\">Current Pain Points Analysis</h3><ul><li><strong>Development Velocity</strong>: Feature development requires extensive cross-team coordination, extending lead times from days to weeks due to shared conflicts</li><li><strong>Database Management</strong>: Schema changes require extensive cross-team coordination to avoid breaking existing functionality</li><li><strong>API Evolution</strong>: API evolution has become constrained by the need to maintain backward compatibility across tightly coupled internal components</li></ul><h3 id=\"alternative-approaches-considered\">Alternative Approaches Considered</h3><ol><li><strong>Monolith Optimization</strong>: Implementing stricter internal boundaries, domain-driven design principles, and better governance processes</li><li><strong>Gradual Service Extraction</strong>: Incrementally extracting bounded contexts into separate services while maintaining monolithic core</li><li><strong>Full Microservices Migration</strong>: Complete decomposition into independent services with separate databases, deployment pipelines, and infrastructure</li></ol><h3 id=\"decision-rationale\">Decision Rationale</h3><p>For our fictitious scenario, we assume a mid-sized engineering organization where multiple product teams have outgrown monolithic coordination, making cross-team dependencies a bottleneck to independent development.</p><p>Monolith optimization would require significant organizational changes that may not scale with growth, while full microservices would introduce operational complexity beyond the team&apos;s current capabilities.</p><p>The gradual service extraction path provides a balanced approach that addresses coordination bottlenecks while managing the transition complexity through incremental changes and shared infrastructure services.</p><h2 id=\"conceptualizing-the-target\">Conceptualizing the Target</h2><p>To give you a better picture, I&apos;ve visualized a rudimentary diagram of the current monolithic core application, its contained products as well as external factors such as native applications and third-party tenants.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://aggregata.de/content/images/2025/06/monolith.drawio-8.png\" class=\"kg-image\" alt=\"Migrating the Monolith I: Conceptualization\" loading=\"lazy\" width=\"841\" height=\"402\" srcset=\"https://aggregata.de/content/images/size/w600/2025/06/monolith.drawio-8.png 600w, https://aggregata.de/content/images/2025/06/monolith.drawio-8.png 841w\" sizes=\"(min-width: 720px) 720px\"></figure><p>The current architecture exhibits several architectural anti-patterns. The circular dependency between business logic and API layers creates a situation where changes in either layer can cascade unpredictably throughout the system. </p><p>Products are tightly coupled modules sharing database schemas and business logic, preventing independent evolution. External integrations bypass API boundaries and connect directly to internal components, creating hidden dependencies that make the system brittle and hard to test.</p><p>Our target architecture eliminates problematic coupling while preserving shared infrastructure benefits. The proposed modular design establishes clear product boundaries with a unified API gateway and shared core services.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://aggregata.de/content/images/2025/06/modulith.drawio-2.png\" class=\"kg-image\" alt=\"Migrating the Monolith I: Conceptualization\" loading=\"lazy\" width=\"841\" height=\"402\" srcset=\"https://aggregata.de/content/images/size/w600/2025/06/modulith.drawio-2.png 600w, https://aggregata.de/content/images/2025/06/modulith.drawio-2.png 841w\" sizes=\"(min-width: 720px) 720px\"></figure><h3 id=\"architectural-approach\">Architectural Approach</h3><p><strong>API Layer Redesign:</strong> The API layer decouples from internal business logic, acting as a composition layer coordinating product-specific service calls. This requires addressing service discovery, circuit breakers, and partial failures through retry mechanisms and fallback strategies.</p><p><strong>Product Isolation:</strong> Each product maintains its bounded context with dedicated business logic and data models. This creates data consistency challenges across boundaries, addressed through eventual consistency patterns using event sourcing for cross-product synchronization.</p><p><strong>Shared Infrastructure:</strong> Centralized services handle authentication, logging, monitoring, and core UI components. This hybrid approach reduces operational complexity versus full microservices while providing product autonomy, requiring careful versioning to avoid shared dependency bottlenecks.</p><h3 id=\"trade-offs-and-risks\">Trade-offs and Risks</h3><ul><li><strong>Data Consistency</strong>: Moving from predefined transactions to eventual consistency patterns may require significant business process changes</li><li><strong>Performance Overhead</strong>: Network calls between services introduce latency that must be optimized through caching and intelligent service placement</li><li><strong>Testing Complexity</strong>: Integration testing across service boundaries requires sophisticated testing strategies and infrastructure</li></ul><p>The success of this migration depends fundamentally on our organization&apos;s ability to gradually build operational maturity and develop distributed systems expertise while systematically extracting services incrementally through carefully planned phases that minimize business disruption.</p><p><strong>Key Architectural Benefits:</strong></p><ul><li><strong>Eliminated Circular Dependencies</strong>: The modular architecture removes circular dependencies between business logic and API layers by introducing clear layered architecture where the API gateway orchestrates calls to independent services without coupling to their implementations.</li><li><strong>Clear Module Boundaries</strong>: Products are now encapsulated as distinct bounded contexts with their own data stores and business logic, enabling teams to work independently while maintaining well-defined contracts for inter-service communication.</li><li><strong>Shared Infrastructure Services</strong>: Common cross-cutting concerns like authentication, monitoring, logging, and UI components are centralized as shared services, enabling products to focus on their core business logic while maintaining consistency across the platform.</li></ul><h2 id=\"next-article\">Next article</h2><p>With our target architecture defined, we need a systematic migration strategy. This requires assessing the current codebase to identify boundaries, dependencies, and risks, then establishing a phased approach for incremental migration without business disruption.</p><h2 id=\"tldr\">TL;DR</h2><p>This article explores transitioning from monolithic to modular architectures by identifying technical and organizational challenges. The author analyzes three problems: API coupling complexity, product isolation needs, and decreased cohesion with cross-team dependencies.</p><p>The proposed solution is a modular architecture that addresses these issues through clear service boundaries, shared infrastructure services, and an API gateway pattern that enables independent product evolution while maintaining operational efficiency.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\nOver the past year, I have participated in several migration projects involving traditional monolithic applications. These endeavors were quite insightful, motivating me to share my experience through this new article series.\nBefore we begin, I'd like to point out that the series is an exercise in planning and continuously publishing long-form content – thus, the contents of this series will revolve around a fictitious application.\nDefining the Entry Point\nLet's consider a monolithic application employing a popular framework like Symfony, Rails or Django. This framework handles the majority of our application business logic in the backend and is the backbone of our fictitious product.\nOur frontend utilizes the framework's provided templating system and relies on a bridge for interactions between client and server. We might also expose an external API for mobile applications or external tenants to utilize.\nThese considerations condense into the traditional definition of a monolithic stack — one codebase to rule them all. This architecture works well for its intended use case most of the time, as proven by time itself.\nAlthough this structure is effective initially, it has certain architectural limitations that become apparent as complexity increases. These limitations lead to challenges such as API misalignment, difficulty with product expansion, and reduced cohesion.\nThe first Problems appear\nThis series requires introducing the necessary crux and foundational understanding to motivate migration to a different architectural approach. To that end, we will present and analyze concrete implementations and design patterns that directly conflict with the traditional monolithic approach.\nProblem 1: APIs\nExternal applications, such as mobile apps and third-party vendors, rely on an API to interact with the core application. In a monolithic architecture, the API layer often becomes tightly coupled with internal business logic, exposing implementation details rather than business capabilities.\nThis coupling means internal refactoring can break external integrations, and API versioning becomes complex as changes ripple through the codebase. Different external consumers requiring different data representations lead to API bloat where endpoints inefficiently serve multiple use cases.\nProblem 2: Products\nAs the application grows, distinct products within the monolith begin to exhibit different scaling requirements, release cycles, and team ownership patterns. Each product may need specialized data models, unique business rules, and different performance characteristics. \nHowever, in a monolithic architecture, all products must share the same technology stack. This creates bottlenecks where teams cannot iterate independently, leading to coordination overhead and slower feature delivery. \nProblem 3: Cohesion\nAs the application expands to serve multiple products, the codebase develops inappropriate coupling between unrelated business domains. Teams inadvertently create shared utilities and services that become tightly coupled across product boundaries, making changes risky and testing complex. \nThe shared database becomes a bottleneck where schema changes require coordination across all teams. Additionally, UI components become overly generic to accommodate different product requirements, resulting in suboptimal user experiences and harder-to-maintain frontend code.\nThis creates a situation where business logic that should be cohesive within product boundaries becomes scattered across shared components, while unrelated products become coupled through these shared dependencies.\n\nA fork in the Road opens up\nWe're faced with a strategic decision that will determine the future scalability and maintainability of our application. Before making this choice, we need to evaluate concrete evidence from our current situation.\nCurrent Pain Points Analysis\n\nDevelopment Velocity: Feature development requires extensive cross-team coordination, extending lead times from days to weeks due to shared conflicts\nDatabase Management: Schema changes require extensive cross-team coordination to avoid breaking existing functionality\nAPI Evolution: API evolution has become constrained by the need to maintain backward compatibility across tightly coupled internal components\n\nAlternative Approaches Considered\n\nMonolith Optimization: Implementing stricter internal boundaries, domain-driven design principles, and better governance processes\nGradual Service Extraction: Incrementally extracting bounded contexts into separate services while maintaining monolithic core\nFull Microservices Migration: Complete decomposition into independent services with separate databases, deployment pipelines, and infrastructure\n\nDecision Rationale\nFor our fictitious scenario, we assume a mid-sized engineering organization where multiple product teams have outgrown monolithic coordination, making cross-team dependencies a bottleneck to independent development.\nMonolith optimization would require significant organizational changes that may not scale with growth, while full microservices would introduce operational complexity beyond the team's current capabilities.\nThe gradual service extraction path provides a balanced approach that addresses coordination bottlenecks while managing the transition complexity through incremental changes and shared infrastructure services.\nConceptualizing the Target\nTo give you a better picture, I've visualized a rudimentary diagram of the current monolithic core application, its contained products as well as external factors such as native applications and third-party tenants.\n\nThe current architecture exhibits several architectural anti-patterns. The circular dependency between business logic and API layers creates a situation where changes in either layer can cascade unpredictably throughout the system. \nProducts are tightly coupled modules sharing database schemas and business logic, preventing independent evolution. External integrations bypass API boundaries and connect directly to internal components, creating hidden dependencies that make the system brittle and hard to test.\nOur target architecture eliminates problematic coupling while preserving shared infrastructure benefits. The proposed modular design establishes clear product boundaries with a unified API gateway and shared core services.\n\nArchitectural Approach\nAPI Layer Redesign: The API layer decouples from internal business logic, acting as a composition layer coordinating product-specific service calls. This requires addressing service discovery, circuit breakers, and partial failures through retry mechanisms and fallback strategies.\nProduct Isolation: Each product maintains its bounded context with dedicated business logic and data models. This creates data consistency challenges across boundaries, addressed through eventual consistency patterns using event sourcing for cross-product synchronization.\nShared Infrastructure: Centralized services handle authentication, logging, monitoring, and core UI components. This hybrid approach reduces operational complexity versus full microservices while providing product autonomy, requiring careful versioning to avoid shared dependency bottlenecks.\nTrade-offs and Risks\n\nData Consistency: Moving from predefined transactions to eventual consistency patterns may require significant business process changes\nPerformance Overhead: Network calls between services introduce latency that must be optimized through caching and intelligent service placement\nTesting Complexity: Integration testing across service boundaries requires sophisticated testing strategies and infrastructure\n\nThe success of this migration depends fundamentally on our organization's ability to gradually build operational maturity and develop distributed systems expertise while systematically extracting services incrementally through carefully planned phases that minimize business disruption.\nKey Architectural Benefits:\n\nEliminated Circular Dependencies: The modular architecture removes circular dependencies between business logic and API layers by introducing clear layered architecture where the API gateway orchestrates calls to independent services without coupling to their implementations.\nClear Module Boundaries: Products are now encapsulated as distinct bounded contexts with their own data stores and business logic, enabling teams to work independently while maintaining well-defined contracts for inter-service communication.\nShared Infrastructure Services: Common cross-cutting concerns like authentication, monitoring, logging, and UI components are centralized as shared services, enabling products to focus on their core business logic while maintaining consistency across the platform.\n\nNext article\nWith our target architecture defined, we need a systematic migration strategy. This requires assessing the current codebase to identify boundaries, dependencies, and risks, then establishing a phased approach for incremental migration without business disruption.\nTL;DR\nThis article explores transitioning from monolithic to modular architectures by identifying technical and organizational challenges. The author analyzes three problems: API coupling complexity, product isolation needs, and decreased cohesion with cross-team dependencies.\nThe proposed solution is a modular architecture that addresses these issues through clear service boundaries, shared infrastructure services, and an API gateway pattern that enables independent product evolution while maintaining operational efficiency.",
      "dc:creator": "Jairus Joer",
      "content": "In the first part of this new article series, we will lay out the conceptualization of migrating a traditional monolithic application to a headless, modularized architecture.",
      "contentSnippet": "In the first part of this new article series, we will lay out the conceptualization of migrating a traditional monolithic application to a headless, modularized architecture.",
      "guid": "6831768242a51d00017474da",
      "categories": [
        "Web",
        "Architecture"
      ],
      "isoDate": "2025-06-09T20:49:48.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Delightful Animations I: Gallery",
      "link": "https://aggregata.de/exploring-delightful-animations-i-gallery/",
      "pubDate": "Mon, 26 May 2025 16:00:52 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><img src=\"https://aggregata.de/content/images/2025/05/2024.05.26-1.png\" alt=\"Delightful Animations I: Gallery\"><p>In today&apos;s web development landscape, creating engaging user experiences often requires capabilities that go beyond traditional animation. In this new article series, we&apos;ll explore how to use popular animation libraries, such as <a href=\"https://gsap.com/?ref=aggregata.de\" rel=\"noreferrer\">GSAP</a> and <a href=\"https://animejs.com/?ref=aggregata.de\" rel=\"noreferrer\">Anime.js</a>, to create delightful animations.</p><p>For this first gallery animation, I revisited a website I designed and developed in 2024 for the communications agency <a href=\"https://www.neuwaerts.de/?ref=aggregata.de\" rel=\"noreferrer\">neuwaerts</a>. While working on this project, I explored and experimented extensively with animation patterns and applications.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://www.neuwaerts.de/?ref=aggregata.de\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">neuwaerts &#x2013; Werbeagentur aus Hannover</div><div class=\"kg-bookmark-description\">Eure Kreativagentur und Werbeagentur aus Hannover. Wir machen Marken zum Erlebnis, entwickeln klare Kommunikation und Kampagnen, die Spa&#xDF; machen.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/65b3d6bc38378ff59e392a11_nw-webclip-256x256.png\" alt=\"Delightful Animations I: Gallery\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/opengraph-home-1200x630.webp\" alt=\"Delightful Animations I: Gallery\" onerror=\"this.style.display = &apos;none&apos;\"></div></a></figure><figure class=\"kg-card kg-video-card kg-width-regular\" data-kg-thumbnail=\"https://aggregata.de/content/media/2025/05/2025-05-25_15-17-06_thumb.jpg\" data-kg-custom-thumbnail>\n            <div class=\"kg-video-container\">\n                <video src=\"https://aggregata.de/content/media/2025/05/2025-05-25_15-17-06.mp4\" poster=\"https://img.spacergif.org/v1/1728x1080/0a/spacer.png\" width=\"1728\" height=\"1080\" loop autoplay muted playsinline preload=\"metadata\" style=\"background: transparent url(&apos;https://aggregata.de/content/media/2025/05/2025-05-25_15-17-06_thumb.jpg&apos;) 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"/>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container kg-video-hide\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"/>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"/>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:07</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1&#xD7;</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"/>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            \n        </figure><!--members-only--><h2 id=\"installing-gsap-and-the-scrolltrigger-plugin\">Installing GSAP and the ScrollTrigger Plugin</h2><p>In order to replicate the horizontal gallery scrolling animation, we first need to <a href=\"https://gsap.com/docs/v3/Installation/?ref=aggregata.de\" rel=\"noreferrer\">install GSAP and the ScrollTrigger plugin</a>. Since all plugins are confined to the <code>gsap</code> package, we&apos;ll only have to install and manage one dependency per project.</p><pre><code class=\"language-bash\">npm install gsap</code></pre><pre><code class=\"language-ts\">import { gsap } from &quot;gsap&quot;;\nimport { ScrollTrigger } from &quot;gsap/ScrollTrigger&quot;;\n\ngsap.registerPlugin(ScrollTrigger);</code></pre><h2 id=\"setting-up-the-gallery-structure\"><strong>Setting up the Gallery Structure</strong></h2><p>Once GSAP and the ScrollTrigger plugin are set up, we can start crafting the intended animation step by step. To start, we&apos;ll create a simple HTML gallery section identifiable by the <code>.gallery</code> class attribute.</p><pre><code class=\"language-html\">&lt;section class=&quot;gallery&quot;&gt;\n  &lt;img\n    src=&quot;https://picsum.photos/720/720?random&amp;2&quot;\n    width=&quot;720&quot;\n    height=&quot;480&quot;\n    alt=&quot;&quot;\n  /&gt;\n  &lt;img\n    src=&quot;https://picsum.photos/720/720?random&amp;3&quot;\n    width=&quot;720&quot;\n    height=&quot;480&quot;\n    alt=&quot;&quot;\n  /&gt;\n  &lt;img\n    src=&quot;https://picsum.photos/720/720?random&amp;4&quot;\n    width=&quot;720&quot;\n    height=&quot;480&quot;\n    alt=&quot;&quot;\n  /&gt;\n  &lt;img\n    src=&quot;https://picsum.photos/720/720?random&amp;5&quot;\n    width=&quot;720&quot;\n    height=&quot;480&quot;\n    alt=&quot;&quot;\n  /&gt;\n  &lt;img\n    src=&quot;https://picsum.photos/720/720?random&amp;6&quot;\n    width=&quot;720&quot;\n    height=&quot;480&quot;\n    alt=&quot;&quot;\n  /&gt;\n  &lt;/section&gt;</code></pre><h2 id=\"performing-the-gallery-animation\">Performing the Gallery Animation</h2><p>Next, we retrieve the gallery element and its last child element, then feed them into the <a href=\"https://gsap.com/docs/v3/GSAP/Tween?ref=aggregata.de\" rel=\"noreferrer\"><code>gsap.to</code> tween</a>. The tween then performs a scroll-bound animation that translates the x-axis of the gallery element to a value equal to the negative of its scroll width minus the width of its last child element.</p><pre><code class=\"language-ts\">const gallery = document.querySelector(&quot;.gallery&quot;);\n\nif (gallery) {\n  const lastItem = gallery.children[gallery.children.length - 1];\n\n  const scrollTween = gsap.to(gallery, {\n    x: () =&gt; -(gallery.scrollWidth - lastItem.clientWidth),\n    ease: &quot;none&quot;,\n    scrollTrigger: {\n      invalidateOnRefresh: true,\n      trigger: gallery,\n      start: &quot;center center&quot;,\n      end: () =&gt; `+=${gallery.scrollWidth}px center`,\n      scrub: true,\n      pin: true,\n    },\n  });\n}</code></pre><p>Using the <a href=\"https://gsap.com/docs/v3/Plugins/ScrollTrigger/?ref=aggregata.de\" rel=\"noreferrer\">ScrollTrigger plugin</a>, we configure the trigger, <a href=\"https://gsap.com/docs/v3/Plugins/ScrollTrigger/?ref=aggregata.de#scrub\" rel=\"noreferrer\">scrub</a>, and <a href=\"https://gsap.com/docs/v3/Plugins/ScrollTrigger/?ref=aggregata.de#pin\" rel=\"noreferrer\">pin</a> behaviors. The Scrub feature links the animation progress to the scroll bar, and the Pin feature sticks the animated element to the screen, similar to a fixed position.</p><figure class=\"kg-card kg-video-card kg-width-regular\" data-kg-thumbnail=\"https://aggregata.de/content/media/2025/05/2025-05-25_01-50-09_thumb.jpg\" data-kg-custom-thumbnail>\n            <div class=\"kg-video-container\">\n                <video src=\"https://aggregata.de/content/media/2025/05/2025-05-25_01-50-09.mp4\" poster=\"https://img.spacergif.org/v1/1728x1080/0a/spacer.png\" width=\"1728\" height=\"1080\" loop autoplay muted playsinline preload=\"metadata\" style=\"background: transparent url(&apos;https://aggregata.de/content/media/2025/05/2025-05-25_01-50-09_thumb.jpg&apos;) 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"/>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container kg-video-hide\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"/>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"/>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:07</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1&#xD7;</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"/>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            \n        </figure><h2 id=\"adding-progressive-image-animations\"><strong>Adding Progressive Image Animations</strong></h2><p>To enhance the visual impact, each image receives its own scroll-triggered animation. These animations use the <a href=\"https://gsap.com/docs/v3/Plugins/ScrollTrigger/?ref=aggregata.de#containerAnimation\" rel=\"noreferrer\"><code>containerAnimation</code></a> property to synchronize with the main gallery movement.</p><pre><code class=\"language-ts\">const images = document.querySelectorAll(&quot;.gallery img&quot;);\nfor (const image of images) {\n  gsap.from(image, {\n    ease: &quot;none&quot;,\n    opacity: 0,\n    filter: &quot;blur(2rem)&quot;,\n    scrollTrigger: {\n      containerAnimation: scrollTween,\n      trigger: image,\n      start: &quot;left right&quot;,\n      end: &quot;center center&quot;,\n      scrub: true,\n    },\n  });\n}</code></pre><p>Although synchronizing animations may seem simple, determining the start and end points of an animation within its new context can be challenging. In this case, consider using the <a href=\"https://gsap.com/docs/v3/Plugins/ScrollTrigger/?ref=aggregata.de#markers\" rel=\"noreferrer\">markers</a> property of the ScrollTrigger plugin to visualize the endpoints.</p><figure class=\"kg-card kg-video-card kg-width-regular\" data-kg-thumbnail=\"https://aggregata.de/content/media/2025/05/2025-05-25_01-50-50_thumb.jpg\" data-kg-custom-thumbnail>\n            <div class=\"kg-video-container\">\n                <video src=\"https://aggregata.de/content/media/2025/05/2025-05-25_01-50-50.mp4\" poster=\"https://img.spacergif.org/v1/1728x1080/0a/spacer.png\" width=\"1728\" height=\"1080\" loop autoplay muted playsinline preload=\"metadata\" style=\"background: transparent url(&apos;https://aggregata.de/content/media/2025/05/2025-05-25_01-50-50_thumb.jpg&apos;) 50% 50% / cover no-repeat;\"></video>\n                <div class=\"kg-video-overlay\">\n                    <button class=\"kg-video-large-play-icon\" aria-label=\"Play video\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                            <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"/>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"kg-video-player-container kg-video-hide\">\n                    <div class=\"kg-video-player\">\n                        <button class=\"kg-video-play-icon\" aria-label=\"Play video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M23.14 10.608 2.253.164A1.559 1.559 0 0 0 0 1.557v20.887a1.558 1.558 0 0 0 2.253 1.392L23.14 13.393a1.557 1.557 0 0 0 0-2.785Z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-pause-icon kg-video-hide\" aria-label=\"Pause video\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <rect x=\"3\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"/>\n                                <rect x=\"14\" y=\"1\" width=\"7\" height=\"22\" rx=\"1.5\" ry=\"1.5\"/>\n                            </svg>\n                        </button>\n                        <span class=\"kg-video-current-time\">0:00</span>\n                        <div class=\"kg-video-time\">\n                            /<span class=\"kg-video-duration\">0:07</span>\n                        </div>\n                        <input type=\"range\" class=\"kg-video-seek-slider\" max=\"100\" value=\"0\">\n                        <button class=\"kg-video-playback-rate\" aria-label=\"Adjust playback speed\">1&#xD7;</button>\n                        <button class=\"kg-video-unmute-icon\" aria-label=\"Unmute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M15.189 2.021a9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h1.794a.249.249 0 0 1 .221.133 9.73 9.73 0 0 0 7.924 4.85h.06a1 1 0 0 0 1-1V3.02a1 1 0 0 0-1.06-.998Z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"kg-video-mute-icon kg-video-hide\" aria-label=\"Mute\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\">\n                                <path d=\"M16.177 4.3a.248.248 0 0 0 .073-.176v-1.1a1 1 0 0 0-1.061-1 9.728 9.728 0 0 0-7.924 4.85.249.249 0 0 1-.221.133H5.25a3 3 0 0 0-3 3v2a3 3 0 0 0 3 3h.114a.251.251 0 0 0 .177-.073ZM23.707 1.706A1 1 0 0 0 22.293.292l-22 22a1 1 0 0 0 0 1.414l.009.009a1 1 0 0 0 1.405-.009l6.63-6.631A.251.251 0 0 1 8.515 17a.245.245 0 0 1 .177.075 10.081 10.081 0 0 0 6.5 2.92 1 1 0 0 0 1.061-1V9.266a.247.247 0 0 1 .073-.176Z\"/>\n                            </svg>\n                        </button>\n                        <input type=\"range\" class=\"kg-video-volume-slider\" max=\"100\" value=\"100\">\n                    </div>\n                </div>\n            </div>\n            \n        </figure><p>And just like that, we implemented the foundation for a delightful, smooth, horizontal gallery scrolling animation using GSAP. From here on out, our animation journey has just begun, as we will delve into more animations and implementation patterns.</p><h2 id=\"considering-best-practices\">Considering Best Practices</h2><p>In the next article in the series, we&apos;ll delve into the details of best practices regarding animations. For now, take a moment to consider the following aspects that we will discuss later:</p><ul><li><strong>Accessibility</strong>: Use the <code>prefers-reduced-motion</code> media query to respect user preferences and ensure that keyboard navigation with clear focus indicators and comprehensive ARIA labels for screen readers works properly.</li><li><strong>Content Strategy</strong>: Design robust fallback layouts that work seamlessly without JavaScript. Maintain the semantic HTML structure of critical content to ensure visibility and accessibility through traditional navigation patterns.</li><li><strong>Performance Testing</strong>: Continuously monitor frame rates across diverse devices, and use browser developer tools to identify potential bottlenecks. Consider using lazy loading strategies for large resources to maintain an optimal user experience.</li><li><strong>Responsive Design</strong>: Carefully design vertical layouts for mobile devices and implement touch-friendly controls for different screen sizes and interaction patterns. Test gesture-based navigation, and ensure horizontal scrolling works intuitively across various device orientations.</li></ul><hr><h2 id=\"tldr\">TL;DR</h2><p>Explore how to implement a horizontal gallery scrolling animation with progressive image animations using GSAP and its ScrollTrigger plugin. Also, learn what to consider when working with animations for a future basis.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\nIn today's web development landscape, creating engaging user experiences often requires capabilities that go beyond traditional animation. In this new article series, we'll explore how to use popular animation libraries, such as GSAP and Anime.js, to create delightful animations.\nFor this first gallery animation, I revisited a website I designed and developed in 2024 for the communications agency neuwaerts. While working on this project, I explored and experimented extensively with animation patterns and applications.\n\nneuwaerts – Werbeagentur aus Hannover\nEure Kreativagentur und Werbeagentur aus Hannover. Wir machen Marken zum Erlebnis, entwickeln klare Kommunikation und Kampagnen, die Spaß machen.\n\n\n\n\n            \n\n                \n0:00\n                        \n0:07\n                        \n1×\n                        \n                            \n                                \n\nInstalling GSAP and the ScrollTrigger Plugin\nIn order to replicate the horizontal gallery scrolling animation, we first need to install GSAP and the ScrollTrigger plugin. Since all plugins are confined to the gsap package, we'll only have to install and manage one dependency per project.\nnpm install gsap\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\nSetting up the Gallery Structure\nOnce GSAP and the ScrollTrigger plugin are set up, we can start crafting the intended animation step by step. To start, we'll create a simple HTML gallery section identifiable by the .gallery class attribute.\n<section class=\"gallery\">\n  <img\n    src=\"https://picsum.photos/720/720?random&2\"\n    width=\"720\"\n    height=\"480\"\n    alt=\"\"\n  />\n  <img\n    src=\"https://picsum.photos/720/720?random&3\"\n    width=\"720\"\n    height=\"480\"\n    alt=\"\"\n  />\n  <img\n    src=\"https://picsum.photos/720/720?random&4\"\n    width=\"720\"\n    height=\"480\"\n    alt=\"\"\n  />\n  <img\n    src=\"https://picsum.photos/720/720?random&5\"\n    width=\"720\"\n    height=\"480\"\n    alt=\"\"\n  />\n  <img\n    src=\"https://picsum.photos/720/720?random&6\"\n    width=\"720\"\n    height=\"480\"\n    alt=\"\"\n  />\n  </section>\nPerforming the Gallery Animation\nNext, we retrieve the gallery element and its last child element, then feed them into the gsap.to tween. The tween then performs a scroll-bound animation that translates the x-axis of the gallery element to a value equal to the negative of its scroll width minus the width of its last child element.\nconst gallery = document.querySelector(\".gallery\");\n\nif (gallery) {\n  const lastItem = gallery.children[gallery.children.length - 1];\n\n  const scrollTween = gsap.to(gallery, {\n    x: () => -(gallery.scrollWidth - lastItem.clientWidth),\n    ease: \"none\",\n    scrollTrigger: {\n      invalidateOnRefresh: true,\n      trigger: gallery,\n      start: \"center center\",\n      end: () => `+=${gallery.scrollWidth}px center`,\n      scrub: true,\n      pin: true,\n    },\n  });\n}\nUsing the ScrollTrigger plugin, we configure the trigger, scrub, and pin behaviors. The Scrub feature links the animation progress to the scroll bar, and the Pin feature sticks the animated element to the screen, similar to a fixed position.\n\n            \n\n                \n0:00\n                        \n0:07\n                        \n1×\n                        \n                            \n                                \nAdding Progressive Image Animations\nTo enhance the visual impact, each image receives its own scroll-triggered animation. These animations use the containerAnimation property to synchronize with the main gallery movement.\nconst images = document.querySelectorAll(\".gallery img\");\nfor (const image of images) {\n  gsap.from(image, {\n    ease: \"none\",\n    opacity: 0,\n    filter: \"blur(2rem)\",\n    scrollTrigger: {\n      containerAnimation: scrollTween,\n      trigger: image,\n      start: \"left right\",\n      end: \"center center\",\n      scrub: true,\n    },\n  });\n}\nAlthough synchronizing animations may seem simple, determining the start and end points of an animation within its new context can be challenging. In this case, consider using the markers property of the ScrollTrigger plugin to visualize the endpoints.\n\n            \n\n                \n0:00\n                        \n0:07\n                        \n1×\n                        \n                            \n                                \nAnd just like that, we implemented the foundation for a delightful, smooth, horizontal gallery scrolling animation using GSAP. From here on out, our animation journey has just begun, as we will delve into more animations and implementation patterns.\nConsidering Best Practices\nIn the next article in the series, we'll delve into the details of best practices regarding animations. For now, take a moment to consider the following aspects that we will discuss later:\n\nAccessibility: Use the prefers-reduced-motion media query to respect user preferences and ensure that keyboard navigation with clear focus indicators and comprehensive ARIA labels for screen readers works properly.\nContent Strategy: Design robust fallback layouts that work seamlessly without JavaScript. Maintain the semantic HTML structure of critical content to ensure visibility and accessibility through traditional navigation patterns.\nPerformance Testing: Continuously monitor frame rates across diverse devices, and use browser developer tools to identify potential bottlenecks. Consider using lazy loading strategies for large resources to maintain an optimal user experience.\nResponsive Design: Carefully design vertical layouts for mobile devices and implement touch-friendly controls for different screen sizes and interaction patterns. Test gesture-based navigation, and ensure horizontal scrolling works intuitively across various device orientations.\n\nTL;DR\nExplore how to implement a horizontal gallery scrolling animation with progressive image animations using GSAP and its ScrollTrigger plugin. Also, learn what to consider when working with animations for a future basis.",
      "dc:creator": "Jairus Joer",
      "content": "Explore how to implement smooth horizontal gallery scrolling animations using GSAP to create engaging visual experiences for image galleries and content carousels",
      "contentSnippet": "Explore how to implement smooth horizontal gallery scrolling animations using GSAP to create engaging visual experiences for image galleries and content carousels",
      "guid": "683176fa42a51d00017474e9",
      "categories": [
        "Web",
        "Animation",
        "Accessibility"
      ],
      "isoDate": "2025-05-26T16:00:52.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Goodbye Read.cv",
      "link": "https://aggregata.de/goodbye-read-cv/",
      "pubDate": "Mon, 14 Apr 2025 18:00:23 GMT",
      "content:encoded": "<blockquote>Think of this article more as a thought piece on one of my favorite platforms on the web. As such, the structure and content of this article will be less organized than you&apos;re used to from our technical articles.</blockquote><img src=\"https://aggregata.de/content/images/2025/04/2024.01.06-1.png\" alt=\"Goodbye Read.cv\"><p>Earlier this year, <a href=\"https://read.cv/explore?ref=aggregata.de\" rel=\"noreferrer\">Read.cv</a> announced that its design and engineering team had been acquired by <a href=\"https://www.perplexity.ai/?ref=aggregata.de\" rel=\"noreferrer\">Perplexity</a>. As a result of this acquisition, Read.cv is winding down operations and will cease operations on May 16, 2025.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://read.cv/a-new-chapter?ref=aggregata.de\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">A new chapter</div><div class=\"kg-bookmark-description\">Read.cv is winding down, joining Perplexity.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/apple-touch-icon.png\" alt=\"Goodbye Read.cv\"></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/og-image-next-chapter.jpg\" alt=\"Goodbye Read.cv\" onerror=\"this.style.display = &apos;none&apos;\"></div></a></figure><hr><p>Read.cv set itself apart from other professional networks by offering an experience focused monstly on the self. Aside from the exploration feed, there was no constant stream of posts flooding the page every time you visited.</p><p>Just you and the resume you were reading, a minimalist yet comprehensive list of personal accomplishments, adorned by the casual accomplice of images or articles detailing the process of the craft. A truly reduced experience.</p><p>It&apos;s this reduced yet refined experience that has delighted me and led me not only to shape my own resume, but more importantly, to wander around and stumble upon other resumes, frequently and almost daily, without boredom in sight.</p><hr><p>I&apos;ve discovered many talented artists, designers, and developers, as well as professions I usually admire from afar, such as interior design, furniture making, and more. The plethora of diversity in its creators invaluably enriched my creative journey.</p><p>As May 16th draws closer by the day, I find myself spending more and more time  preserving the people I&apos;ve found while trying to capture the essence of an amazing platform that will soon be gone.</p><p>In this endeavor, I&apos;m answering the call to <em>carry the torch</em> and rebuild my own resume in the spirit of Read.cv. I&apos;m currently researching a possible candidate that uses <a href=\"https://astro.build/?ref=aggregata.de\" rel=\"noreferrer\">Astro</a> to display and manage its content, and hope to share it soon.</p><hr><p>In the meantime, I&apos;ll be spending some more time on Read.cv, reading the resumes of great people and adding their homepages to my ever-growing list of bookmarks, which I hope to share on my new resume soon.</p><p>I highly recommend browsing Read.cv while it&apos;s still online. No new content can be posted, so it serves as a snapshot of the community as it was in February 2025. Who knows what gems you might unearth in this frozen place.</p><p>I&apos;ll leave you with three resumes from my extensive collection of bookmarks that I return to time and again for inspiration. <em>Please try to enjoy each resume equally, and not show preference for any over the others.</em></p><hr><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://babsi.read.cv/?ref=aggregata.de\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Barbara Schussmann</div><div class=\"kg-bookmark-description\">Artist + UX Designer in Malm&#xF6;, Sweden, She/her</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/apple-touch-icon-3.png\" alt=\"Goodbye Read.cv\"><span class=\"kg-bookmark-author\">Read.cv</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/open-graph-d2f64995-a60b-4adb-9ad9-ce8f6e0efbd4.png\" alt=\"Goodbye Read.cv\" onerror=\"this.style.display = &apos;none&apos;\"></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://read.cv/linusrogge?ref=aggregata.de\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Linus Rogge &#x2013; Read.cv</div><div class=\"kg-bookmark-description\">Software Gestalter in Hamburg, he/him</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/apple-touch-icon-2.png\" alt=\"Goodbye Read.cv\"><span class=\"kg-bookmark-author\">Read.cv</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/open-graph-55adc841-ce2d-43c3-89e8-9ad08c36689b.png\" alt=\"Goodbye Read.cv\" onerror=\"this.style.display = &apos;none&apos;\"></div></a></figure><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://koenigmarco.com/?ref=aggregata.de\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Marco Koenig</div><div class=\"kg-bookmark-description\">Software Design in Germany</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/apple-touch-icon-1.png\" alt=\"Goodbye Read.cv\"><span class=\"kg-bookmark-author\">Read.cv</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/open-graph-7bf8aa99-e34a-4199-a1da-5f9cbdf9950e.png\" alt=\"Goodbye Read.cv\" onerror=\"this.style.display = &apos;none&apos;\"></div></a></figure>",
      "content:encodedSnippet": "Think of this article more as a thought piece on one of my favorite platforms on the web. As such, the structure and content of this article will be less organized than you're used to from our technical articles.\n\nEarlier this year, Read.cv announced that its design and engineering team had been acquired by Perplexity. As a result of this acquisition, Read.cv is winding down operations and will cease operations on May 16, 2025.\n\nA new chapter\nRead.cv is winding down, joining Perplexity.\n\n\n\n\nRead.cv set itself apart from other professional networks by offering an experience focused monstly on the self. Aside from the exploration feed, there was no constant stream of posts flooding the page every time you visited.\nJust you and the resume you were reading, a minimalist yet comprehensive list of personal accomplishments, adorned by the casual accomplice of images or articles detailing the process of the craft. A truly reduced experience.\nIt's this reduced yet refined experience that has delighted me and led me not only to shape my own resume, but more importantly, to wander around and stumble upon other resumes, frequently and almost daily, without boredom in sight.\n\nI've discovered many talented artists, designers, and developers, as well as professions I usually admire from afar, such as interior design, furniture making, and more. The plethora of diversity in its creators invaluably enriched my creative journey.\nAs May 16th draws closer by the day, I find myself spending more and more time  preserving the people I've found while trying to capture the essence of an amazing platform that will soon be gone.\nIn this endeavor, I'm answering the call to carry the torch and rebuild my own resume in the spirit of Read.cv. I'm currently researching a possible candidate that uses Astro to display and manage its content, and hope to share it soon.\n\nIn the meantime, I'll be spending some more time on Read.cv, reading the resumes of great people and adding their homepages to my ever-growing list of bookmarks, which I hope to share on my new resume soon.\nI highly recommend browsing Read.cv while it's still online. No new content can be posted, so it serves as a snapshot of the community as it was in February 2025. Who knows what gems you might unearth in this frozen place.\nI'll leave you with three resumes from my extensive collection of bookmarks that I return to time and again for inspiration. Please try to enjoy each resume equally, and not show preference for any over the others.\n\nBarbara Schussmann\nArtist + UX Designer in Malmö, Sweden, She/her\nRead.cv\n\n\n\nLinus Rogge – Read.cv\nSoftware Gestalter in Hamburg, he/him\nRead.cv\n\n\n\nMarco Koenig\nSoftware Design in Germany\nRead.cv",
      "dc:creator": "Jairus Joer",
      "content": "Read.cv, the platform that celebrates your side projects, passions, and curiosities, has been acquired by Perplexity and will be winding down in the coming weeks.",
      "contentSnippet": "Read.cv, the platform that celebrates your side projects, passions, and curiosities, has been acquired by Perplexity and will be winding down in the coming weeks.",
      "guid": "67fcbaae54d8890001d9089e",
      "categories": [
        "Application",
        "Web",
        "Personal"
      ],
      "isoDate": "2025-04-14T18:00:23.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "The future of the web might be native",
      "link": "https://aggregata.de/the-future-of-the-web-might-be-native/",
      "pubDate": "Mon, 31 Mar 2025 12:03:32 GMT",
      "content:encoded": "<img src=\"https://aggregata.de/content/images/2025/03/photo-1618005198919-d3d4b5a92ead.jpeg\" alt=\"The future of the web might be native\"><p>The Web has changed dramatically since its inception in the early 1990s. What began as a simple document sharing system with basic HTML has evolved into a sophisticated application platform capable of supporting complex, interactive experiences.</p><p>Its history of development has been marked by cycles of centralization and decentralization. From early browser-native capabilities, to a shift to client-side JavaScript frameworks and external dependencies, to the return of server-side applications.</p><h2 id=\"a-paradox-emerges\">A paradox emerges</h2><p>Today&apos;s browsers are technical marvels, packed with deeply integrated features and capabilities just waiting to be exploited. Yet, paradoxically, many developers remain unaware of these advances or choose to implement dependencies that replicate functionality that is already built in.</p><p>This paradox creates a peculiar situation where projects become increasingly bloated with dependencies that replicate functionality already built into the browser. All the while, the solution - leveraging the native capabilities of the browser - is overlooked.</p><p>The paradox may stem from a self-perpetuating cycle where education gaps, framework ecosystems, and organizational inertia reinforce reliance on familiar dependencies while discouraging exploration of browser-native capabilities.</p><!--members-only--><h2 id=\"the-current-state\">The current state</h2><p>A dependency-based approach to browser issues has taken hold for a variety of valid historical reasons. From significant feature gaps to compatibility issues, dependencies have emerged to bridge the gap between browsers.</p><p>In particular, jQuery was an early and strong advocate for implementing common functionality across browsers. Today, efforts such as the Interop project, supported by major companies such as Apple, Google, and Mozilla, are enforcing common features and compatibility across the board.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/web-platform-tests/interop?ref=aggregata.de\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">GitHub - web-platform-tests/interop: web-platform-tests Interop project</div><div class=\"kg-bookmark-description\">web-platform-tests Interop project. Contribute to web-platform-tests/interop development by creating an account on GitHub.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/pinned-octocat-093da3e6fa40.svg\" alt=\"The future of the web might be native\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">web-platform-tests</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/interop\" alt=\"The future of the web might be native\" onerror=\"this.style.display = &apos;none&apos;\"></div></a></figure><p>Over the past 10 years, browsers have consolidated into a standardized and mature ecosystem, spawning working groups to implement cross-compatible features, such as the WebExtensions Community Group (WECG).</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://github.com/w3c/webextensions?ref=aggregata.de\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">GitHub - w3c/webextensions: Charter and administrivia for the WebExtensions Community Group (WECG)</div><div class=\"kg-bookmark-description\">Charter and administrivia for the WebExtensions Community Group (WECG) - w3c/webextensions</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/pinned-octocat-093da3e6fa40-1.svg\" alt=\"The future of the web might be native\"><span class=\"kg-bookmark-author\">GitHub</span><span class=\"kg-bookmark-publisher\">w3c</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/webextensions\" alt=\"The future of the web might be native\" onerror=\"this.style.display = &apos;none&apos;\"></div></a></figure><h2 id=\"the-case-for-native\">The case for native</h2><p>We&apos;ve come a long way from the fragmented experience of a decade ago, and while the legacy of cross-browser compatibility may still linger in developers&apos; minds, it&apos;s time to consider the cases for a native approach.</p><p>Browser-native capabilities reduce external dependencies and leverage cross-compatibility features to provide functionality previously reserved for those dependencies without the overhead of managing and maintaining them in a project.</p><p>A prominent and widely recognized example, which we&apos;ll discuss in the next chapter, for advocating a native approach is dialogs and form validation - both of which are already available and <a href=\"https://caniuse.com/dialog?ref=aggregata.de\" rel=\"noreferrer\">fully supported in all major browsers as of March 2022</a>.</p><h2 id=\"dialogs-and-form-validation\">Dialogs and Form Validation</h2><h3 id=\"dialogs\">Dialogs</h3><p>Dialogs used to be a challenge. Issues like focus management, context communication for assistive technologies, and UI/UX concerns such as dialog stacking, Z-index, and closing methods had to be handled in applications increasingly adopting modal-based interfaces.</p><p>The <code>&lt;dialog&gt;</code> HTML element addresses many of these issues, providing a customizable, modal-based approach that implements accessible and stackable dialogs in a separate top layer that is also compatible with form submission requests.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog?ref=aggregata.de\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">&lt;dialog&gt;: The Dialog element - HTML: HyperText Markup Language | MDN</div><div class=\"kg-bookmark-description\">The &lt;dialog&gt; HTML element represents a modal or non-modal dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/favicon-48x48.bc390275e955dacb2e65-2.png\" alt=\"The future of the web might be native\"><span class=\"kg-bookmark-author\">MDN Web Docs</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/mdn-social-share.d893525a4fb5fb1f67a2-2.png\" alt=\"The future of the web might be native\" onerror=\"this.style.display = &apos;none&apos;\"></div></a></figure><h3 id=\"form-validation\">Form Validation</h3><p>This was also the case with form validation. Waiting for a validated response from the server for each submit request was not only slower, but also required resources to process each form over and over again until its contents fit the desired patterns.</p><p>Implementing form input validation in the client also reduces the response time and resources required to facilitate the same process. In case of incorrect input, the browser will reject the form submission request and prompt the user to correct the incorrect input.</p><figure class=\"kg-card kg-bookmark-card\"><a class=\"kg-bookmark-container\" href=\"https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Form_validation?ref=aggregata.de\"><div class=\"kg-bookmark-content\"><div class=\"kg-bookmark-title\">Client-side form validation - Learn web development | MDN</div><div class=\"kg-bookmark-description\">It is important to ensure all required form controls are filled out, in the correct format, before submitting user entered form data to the server. This client-side form validation helps ensure data entered matches the requirements set forth in the various form controls.</div><div class=\"kg-bookmark-metadata\"><img class=\"kg-bookmark-icon\" src=\"https://aggregata.de/content/images/icon/favicon-48x48.bc390275e955dacb2e65.png\" alt=\"The future of the web might be native\"><span class=\"kg-bookmark-author\">MDN Web Docs</span></div></div><div class=\"kg-bookmark-thumbnail\"><img src=\"https://aggregata.de/content/images/thumbnail/mdn-social-share.d893525a4fb5fb1f67a2.png\" alt=\"The future of the web might be native\" onerror=\"this.style.display = &apos;none&apos;\"></div></a></figure><h3 id=\"practical-example\">Practical example</h3><p>In its simplest form, a modal-based form with validation can take the following shape, where the user&apos;s Email, name, and birthday are required to be entered before the form is successfully submitted and the dialog automatically closes:</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-html\">&lt;dialog&gt;\n  &lt;form method=&quot;dialog&quot;&gt;\n    &lt;label&gt;\n      Email\n      &lt;input type=&quot;email&quot; name=&quot;email&quot; autofocus required /&gt;\n    &lt;/label&gt;\n    &lt;label&gt;\n      Name\n      &lt;input type=&quot;text&quot; name=&quot;name&quot; required /&gt;\n    &lt;/label&gt;\n    &lt;label&gt;\n      Birthday\n      &lt;input type=&quot;datetime-local&quot; name=&quot;birthday&quot; required /&gt;\n    &lt;/label&gt;\n    &lt;div&gt;\n      &lt;button type=&quot;button&quot;&gt;Close&lt;/button&gt;\n      &lt;button type=&quot;reset&quot;&gt;Reset&lt;/button&gt;\n      &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n&lt;/dialog&gt;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">Native implementation of a modal-based form with validation</span></p></figcaption></figure><p>Let&apos;s take a look at the code above, starting with the <code>&lt;form&gt;</code> element; its submit method has been changed to <code>dialog</code>. This integrates with the <code>&lt;dialog&gt;</code> element to close the dialog upon successful form submission.</p><p>While the focus automatically moves to the dialog element when it is opened, we can further enhance the placement of the focus by using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus?ref=aggregata.de\" rel=\"noreferrer\"><code>autofocus</code></a> attribute in an <code>&lt;input&gt;</code> element to allow immediate input without further navigation.</p><p>To verify that our form contains all the necessary and valid information, the <code>type</code> and <code>required</code> attributes come in handy. For a more granular approach, consider <a href=\"https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Form_validation?ref=aggregata.de#using_built-in_form_validation\" rel=\"noreferrer\">using built-in form validation</a> with advanced attributes such as <code>pattern</code>, which accepts regex.</p><h2 id=\"the-case-against-native\">The case against native</h2><p>For now, we&apos;ve only covered the upsides of native capabilities, but as with any tool, there are downsides and possible considerations to be made when considering implementing a native-based approach in a larger project context.</p><p>Native capabilities sacrifice design control by using system UI for interfaces like form validation and selection inputs. This limitation extends to complex validation scenarios with cross-field dependencies where native solutions may be inadequate.</p><p>While native features typically perform better, they often lack customization options for complex applications. Major frameworks provide integrated components that enhance developer experience, though at the cost of increased abstraction and dependencies.</p><h2 id=\"tldr\">TL;DR</h2><p>Modern browsers offer powerful native features that can replace many third-party dependencies. Elements like <code>&lt;dialog&gt;</code> and form validation provide accessible, performant solutions out of the box, particularly for simple to moderately complex applications.</p><p>For complex applications requiring specific UI requirements or deep framework integration, traditional frameworks remain the better choice. The key is to evaluate each feature&apos;s requirements against native capabilities before reaching for external dependencies.<br></p>",
      "content:encodedSnippet": "The Web has changed dramatically since its inception in the early 1990s. What began as a simple document sharing system with basic HTML has evolved into a sophisticated application platform capable of supporting complex, interactive experiences.\nIts history of development has been marked by cycles of centralization and decentralization. From early browser-native capabilities, to a shift to client-side JavaScript frameworks and external dependencies, to the return of server-side applications.\nA paradox emerges\nToday's browsers are technical marvels, packed with deeply integrated features and capabilities just waiting to be exploited. Yet, paradoxically, many developers remain unaware of these advances or choose to implement dependencies that replicate functionality that is already built in.\nThis paradox creates a peculiar situation where projects become increasingly bloated with dependencies that replicate functionality already built into the browser. All the while, the solution - leveraging the native capabilities of the browser - is overlooked.\nThe paradox may stem from a self-perpetuating cycle where education gaps, framework ecosystems, and organizational inertia reinforce reliance on familiar dependencies while discouraging exploration of browser-native capabilities.\n\nThe current state\nA dependency-based approach to browser issues has taken hold for a variety of valid historical reasons. From significant feature gaps to compatibility issues, dependencies have emerged to bridge the gap between browsers.\nIn particular, jQuery was an early and strong advocate for implementing common functionality across browsers. Today, efforts such as the Interop project, supported by major companies such as Apple, Google, and Mozilla, are enforcing common features and compatibility across the board.\n\nGitHub - web-platform-tests/interop: web-platform-tests Interop project\nweb-platform-tests Interop project. Contribute to web-platform-tests/interop development by creating an account on GitHub.\nGitHubweb-platform-tests\n\n\n\nOver the past 10 years, browsers have consolidated into a standardized and mature ecosystem, spawning working groups to implement cross-compatible features, such as the WebExtensions Community Group (WECG).\n\nGitHub - w3c/webextensions: Charter and administrivia for the WebExtensions Community Group (WECG)\nCharter and administrivia for the WebExtensions Community Group (WECG) - w3c/webextensions\nGitHubw3c\n\n\n\nThe case for native\nWe've come a long way from the fragmented experience of a decade ago, and while the legacy of cross-browser compatibility may still linger in developers' minds, it's time to consider the cases for a native approach.\nBrowser-native capabilities reduce external dependencies and leverage cross-compatibility features to provide functionality previously reserved for those dependencies without the overhead of managing and maintaining them in a project.\nA prominent and widely recognized example, which we'll discuss in the next chapter, for advocating a native approach is dialogs and form validation - both of which are already available and fully supported in all major browsers as of March 2022.\nDialogs and Form Validation\nDialogs\nDialogs used to be a challenge. Issues like focus management, context communication for assistive technologies, and UI/UX concerns such as dialog stacking, Z-index, and closing methods had to be handled in applications increasingly adopting modal-based interfaces.\nThe <dialog> HTML element addresses many of these issues, providing a customizable, modal-based approach that implements accessible and stackable dialogs in a separate top layer that is also compatible with form submission requests.\n\n<dialog>: The Dialog element - HTML: HyperText Markup Language | MDN\nThe <dialog> HTML element represents a modal or non-modal dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.\nMDN Web Docs\n\n\n\nForm Validation\nThis was also the case with form validation. Waiting for a validated response from the server for each submit request was not only slower, but also required resources to process each form over and over again until its contents fit the desired patterns.\nImplementing form input validation in the client also reduces the response time and resources required to facilitate the same process. In case of incorrect input, the browser will reject the form submission request and prompt the user to correct the incorrect input.\n\nClient-side form validation - Learn web development | MDN\nIt is important to ensure all required form controls are filled out, in the correct format, before submitting user entered form data to the server. This client-side form validation helps ensure data entered matches the requirements set forth in the various form controls.\nMDN Web Docs\n\n\n\nPractical example\nIn its simplest form, a modal-based form with validation can take the following shape, where the user's Email, name, and birthday are required to be entered before the form is successfully submitted and the dialog automatically closes:\n\n<dialog>\n  <form method=\"dialog\">\n    <label>\n      Email\n      <input type=\"email\" name=\"email\" autofocus required />\n    </label>\n    <label>\n      Name\n      <input type=\"text\" name=\"name\" required />\n    </label>\n    <label>\n      Birthday\n      <input type=\"datetime-local\" name=\"birthday\" required />\n    </label>\n    <div>\n      <button type=\"button\">Close</button>\n      <button type=\"reset\">Reset</button>\n      <button type=\"submit\">Submit</button>\n    </div>\n  </form>\n</dialog>\n\nNative implementation of a modal-based form with validation\n\nLet's take a look at the code above, starting with the <form> element; its submit method has been changed to dialog. This integrates with the <dialog> element to close the dialog upon successful form submission.\nWhile the focus automatically moves to the dialog element when it is opened, we can further enhance the placement of the focus by using the autofocus attribute in an <input> element to allow immediate input without further navigation.\nTo verify that our form contains all the necessary and valid information, the type and required attributes come in handy. For a more granular approach, consider using built-in form validation with advanced attributes such as pattern, which accepts regex.\nThe case against native\nFor now, we've only covered the upsides of native capabilities, but as with any tool, there are downsides and possible considerations to be made when considering implementing a native-based approach in a larger project context.\nNative capabilities sacrifice design control by using system UI for interfaces like form validation and selection inputs. This limitation extends to complex validation scenarios with cross-field dependencies where native solutions may be inadequate.\nWhile native features typically perform better, they often lack customization options for complex applications. Major frameworks provide integrated components that enhance developer experience, though at the cost of increased abstraction and dependencies.\nTL;DR\nModern browsers offer powerful native features that can replace many third-party dependencies. Elements like <dialog> and form validation provide accessible, performant solutions out of the box, particularly for simple to moderately complex applications.\nFor complex applications requiring specific UI requirements or deep framework integration, traditional frameworks remain the better choice. The key is to evaluate each feature's requirements against native capabilities before reaching for external dependencies.",
      "dc:creator": "Jairus Joer",
      "content": "The ever-expanding catalog of web-native technologies and features offered by your browser often goes unnoticed or untapped in real-world projects. Today, we're changing that paradigm and explore applicable patterns for your projects.",
      "contentSnippet": "The ever-expanding catalog of web-native technologies and features offered by your browser often goes unnoticed or untapped in real-world projects. Today, we're changing that paradigm and explore applicable patterns for your projects.",
      "guid": "67e01b0b95f52300012591db",
      "categories": [
        "Web",
        "Javascript",
        "Accessibility"
      ],
      "isoDate": "2025-03-31T12:03:32.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Cross-Document View Transitions for Multi-Page Applications",
      "link": "https://aggregata.de/cross-document-view-transitions-for-multi-page-applications/",
      "pubDate": "Sun, 02 Mar 2025 23:00:00 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><h2 id=\"taking-view-transitions-to-the-next-level\">Taking View Transitions to the Next Level</h2><img src=\"https://aggregata.de/content/images/2025/03/cover.png\" alt=\"Cross-Document View Transitions for Multi-Page Applications\"><p>In our article&#xA0;<a href=\"https://aggregata.de/leverage-the-view-transition-api-in-any-project/\" rel=\"noreferrer\"><em>Leverage the View Transition API in any Project</em></a>, we explored the View Transition API within the context of a single document. Now, let&#x2019;s take this a step further and implement transitions across different documents.</p><p><a href=\"https://developer.chrome.com/docs/web-platform/view-transitions/cross-document?ref=aggregata.de\">Cross-document view transitions</a>&#xA0;bridge the gap between traditional multi-page applications and single-page applications in terms of user experience. This allows developers to easily access the smooth navigation experience typically associated with single-page applications.</p><h2 id=\"browser-support\">Browser Support</h2><p>As mentioned in our previous article, browser support for the View Transition API is still evolving. Cross-document view transitions currently are supported by Chromium and Safari. However, we can still implement these transitions as progressive enhancements.</p><h2 id=\"implementing-cross-document-transitions\">Implementing Cross-Document Transitions</h2><p>Implementing cross-document view transitions requires setting the CSS query&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@view-transition?ref=aggregata.de\"><code>@view-transition</code></a>. Supporting browsers will apply transitions during navigation, while non-supporting browsers will navigate normally without visual effects.</p><pre><code class=\"language-css\">@view-transition {\n  navigation: auto;\n}</code></pre><p>Once you&#x2019;ve set the CSS query, you can use the&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/view-transition-name?ref=aggregata.de\"><code>view-transition-name</code></a>&#xA0;CSS property to apply simple crossfade transitions to pages in your application, just like you&#x2019;re used to with same-document transitions.</p><pre><code class=\"language-html\">&lt;main&gt;\n  &lt;article style=&quot;view-transition-name: article-41;&quot;&gt;&lt;/article&gt;\n  &lt;article style=&quot;view-transition-name: article-42;&quot;&gt;&lt;/article&gt;\n  &lt;article style=&quot;view-transition-name: article-43;&quot;&gt;&lt;/article&gt;\n&lt;/main&gt;</code></pre><blockquote>Remember that the&#xA0;<code>view-transition-name</code>&#xA0;CSS property, as seen above, must be&#xA0;<u>unique for each element</u>&#xA0;to be transitioned.</blockquote><h2 id=\"styling-cross-document-transitions\">Styling Cross-Document Transitions</h2><p>As with same-document transitions, we can use CSS to control the appearance of cross-document transitions. By default, view transitions use a crossfade to transition between the element snapshots captured by the browser.</p><pre><code class=\"language-css\">::view-transition-old(root) {\n  animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-out;\n}\n\n::view-transition-new(root) {\n  animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-in;\n}\n\n@keyframes fade-out {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}</code></pre><p>While&#xA0;<code>root</code>&#xA0;affects the entire page, we can also target specific elements for transitions by using the&#xA0;<code>view-transition-name</code>&#xA0;CSS property more selectively. This gives us the ability to animate multiple elements individually and simultaneously in a single transition.</p><pre><code class=\"language-css\">.page-transition-element {\n  view-transition-name: page-element;\n}\n\n::view-transition-old(page-element) {\n  animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-out;\n}\n\n::view-transition-new(page-element) {\n  animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-in;\n}\n\n@keyframes slide-out {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(-100%);\n  }\n}\n\n@keyframes slide-in {\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}</code></pre><h2 id=\"practical-example-continuity\">Practical Example: Continuity</h2><p>A common use case for cross-document view transitions is to maintain the continuity of elements between pages. For example, when a user clicks on an article thumbnail in a list to view the article&#x2019;s content on a detail page.</p><blockquote>This very example is used throughout our website to provide a seamless experience between the home page and the article details page.</blockquote><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-html\">&lt;article&gt;\n  &lt;a\n    href=&apos;/en/blog/web/article-42&apos;\n    style=&apos;view-transition-name: article-42;&apos;\n  &gt;\n    &lt;img\n      src=&apos;/almas-salakhov-oAL2kADlRTk-unsplash.jpg&apos;\n      alt=&apos;3D render by Almas Salakhov&apos;\n    /&gt;\n    &lt;h2&gt;Article 42 &#x2013; The answer to everything&lt;/h2&gt;\n  &lt;/a&gt;\n&lt;/article&gt;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">index.html</span></p></figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-html\">&lt;main&gt;\n  &lt;header style=&apos;view-transition-name: article-42;&apos;&gt;\n    &lt;img\n      src=&apos;/almas-salakhov-oAL2kADlRTk-unsplash.jpg&apos;\n      alt=&apos;3D render by Almas Salakhov&apos;\n    /&gt;\n    &lt;h1&gt;Article 42 &#x2013; The answer to everything&lt;/h1&gt;\n  &lt;/header&gt;\n&lt;/main&gt;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">details.html</span></p></figcaption></figure><p>With the appropriate view transition styles, the thumbnail animates smoothly from its position on the home page to its position on the article detail page, creating a seamless and engaging user experience.</p><h2 id=\"limitations-and-considerations\">Limitations and Considerations</h2><p>Cross-document view transitions offer easy-to-apply benefits, but come with some limitations and considerations. Currently, browser support is limited to Chromium and Safari, which can affect a consistent implementation strategy.</p><p>Complex transitions with large DOM changes may impact performance, and JavaScript state isn&#x2019;t automatically preserved between pages. Server-rendered applications require additional implementation considerations.</p><p>Despite these challenges, the improved user experience makes view transitions worth implementing as progressive enhancements. As the View Transition API evolves, we can expect expanded capabilities, better performance, and broader browser support in the future.</p><hr><h2 id=\"tldr\">TL;DR</h2><p>Cross-document view transitions enable smooth animations between pages in multi-page applications. They maintain element continuity across page loads, enhancing user experience while preserving multi-page architecture benefits, despite limited browser support.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\nTaking View Transitions to the Next Level\n\nIn our article Leverage the View Transition API in any Project, we explored the View Transition API within the context of a single document. Now, let’s take this a step further and implement transitions across different documents.\nCross-document view transitions bridge the gap between traditional multi-page applications and single-page applications in terms of user experience. This allows developers to easily access the smooth navigation experience typically associated with single-page applications.\nBrowser Support\nAs mentioned in our previous article, browser support for the View Transition API is still evolving. Cross-document view transitions currently are supported by Chromium and Safari. However, we can still implement these transitions as progressive enhancements.\nImplementing Cross-Document Transitions\nImplementing cross-document view transitions requires setting the CSS query @view-transition. Supporting browsers will apply transitions during navigation, while non-supporting browsers will navigate normally without visual effects.\n@view-transition {\n  navigation: auto;\n}\nOnce you’ve set the CSS query, you can use the view-transition-name CSS property to apply simple crossfade transitions to pages in your application, just like you’re used to with same-document transitions.\n<main>\n  <article style=\"view-transition-name: article-41;\"></article>\n  <article style=\"view-transition-name: article-42;\"></article>\n  <article style=\"view-transition-name: article-43;\"></article>\n</main>\nRemember that the view-transition-name CSS property, as seen above, must be unique for each element to be transitioned.\nStyling Cross-Document Transitions\nAs with same-document transitions, we can use CSS to control the appearance of cross-document transitions. By default, view transitions use a crossfade to transition between the element snapshots captured by the browser.\n::view-transition-old(root) {\n  animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-out;\n}\n\n::view-transition-new(root) {\n  animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-in;\n}\n\n@keyframes fade-out {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\nWhile root affects the entire page, we can also target specific elements for transitions by using the view-transition-name CSS property more selectively. This gives us the ability to animate multiple elements individually and simultaneously in a single transition.\n.page-transition-element {\n  view-transition-name: page-element;\n}\n\n::view-transition-old(page-element) {\n  animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-out;\n}\n\n::view-transition-new(page-element) {\n  animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-in;\n}\n\n@keyframes slide-out {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(-100%);\n  }\n}\n\n@keyframes slide-in {\n  from {\n    transform: translateX(100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\nPractical Example: Continuity\nA common use case for cross-document view transitions is to maintain the continuity of elements between pages. For example, when a user clicks on an article thumbnail in a list to view the article’s content on a detail page.\nThis very example is used throughout our website to provide a seamless experience between the home page and the article details page.\n\n<article>\n  <a\n    href='/en/blog/web/article-42'\n    style='view-transition-name: article-42;'\n  >\n    <img\n      src='/almas-salakhov-oAL2kADlRTk-unsplash.jpg'\n      alt='3D render by Almas Salakhov'\n    />\n    <h2>Article 42 – The answer to everything</h2>\n  </a>\n</article>\n\nindex.html\n\n<main>\n  <header style='view-transition-name: article-42;'>\n    <img\n      src='/almas-salakhov-oAL2kADlRTk-unsplash.jpg'\n      alt='3D render by Almas Salakhov'\n    />\n    <h1>Article 42 – The answer to everything</h1>\n  </header>\n</main>\n\ndetails.html\n\nWith the appropriate view transition styles, the thumbnail animates smoothly from its position on the home page to its position on the article detail page, creating a seamless and engaging user experience.\nLimitations and Considerations\nCross-document view transitions offer easy-to-apply benefits, but come with some limitations and considerations. Currently, browser support is limited to Chromium and Safari, which can affect a consistent implementation strategy.\nComplex transitions with large DOM changes may impact performance, and JavaScript state isn’t automatically preserved between pages. Server-rendered applications require additional implementation considerations.\nDespite these challenges, the improved user experience makes view transitions worth implementing as progressive enhancements. As the View Transition API evolves, we can expect expanded capabilities, better performance, and broader browser support in the future.\n\nTL;DR\nCross-document view transitions enable smooth animations between pages in multi-page applications. They maintain element continuity across page loads, enhancing user experience while preserving multi-page architecture benefits, despite limited browser support.",
      "dc:creator": "Jairus Joer",
      "content": "Learn how to implement cross-document view transitions to create seamless page navigations and enhance user experience in multi-page web applications of any stack.\n",
      "contentSnippet": "Learn how to implement cross-document view transitions to create seamless page navigations and enhance user experience in multi-page web applications of any stack.",
      "guid": "67cef8e168126e000130d030",
      "categories": [
        "Web",
        "Javascript"
      ],
      "isoDate": "2025-03-02T23:00:00.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Improve a Component Library for Designers and Developers",
      "link": "https://aggregata.de/improve-a-component-library-for-designers-and-developers/",
      "pubDate": "Sun, 16 Feb 2025 23:00:00 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><h2 id=\"where-we-left-off\">Where we left off</h2><img src=\"https://aggregata.de/content/images/2025/02/cover-7.png\" alt=\"Improve a Component Library for Designers and Developers\"><p>In the&#xA0;<a href=\"https://aggregata.de/expand-a-component-library-for-designers-and-developers/\" rel=\"noreferrer\">previous article</a>, we expanded our button component by implementing design tokens and color variants. We established a system of primitive and semantic tokens that allowed us to manage colors consistently across both design and development.</p><p>In this article we&#x2019;re going to enhance the button component by adding interaction states. This change will extend our designer requirements and ensure that our component provides a smoother user experience.</p><h3 id=\"new-requirement-states\">New Requirement: States</h3><ul><li><code>:hover</code>:&#xA0;<em>Visual feedback when hovering over the button</em></li><li><code>:focus</code>:&#xA0;<em>Clear indication when the button is focused</em></li><li><code>:active</code>:&#xA0;<em>Visual feedback when the button is clicked</em></li><li><code>:disabled</code>:&#xA0;<em>Distinct appearance when the button is disabled</em></li></ul><h2 id=\"extending-the-button-component\">Extending the Button Component</h2><p>First, let&#x2019;s update our button component to support the new&#xA0;<code>disabled</code>&#xA0;state and prepare it for the interaction states we&#x2019;ll implement. We&#x2019;ll add a new&#xA0;<code>disabled</code>&#xA0;property and ensure it&#x2019;s properly passed to both the main button and selector components.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-vue\">&lt;script setup lang=&quot;ts&quot;&gt;\nimport Icon from &apos;./Icon.vue&apos;;\n\ndefineOptions({ inheritAttrs: false });\n\nconst {\n  variant = &apos;bold&apos;,\n  color = &apos;brand&apos;,\n  is = &apos;button&apos;,\n  selector = false,\n  disabled = false,\n} = defineProps&lt;{\n  variant?: &apos;bold&apos; | &apos;subtle&apos; | &apos;outline&apos; | &apos;ghost&apos;;\n  color?: &apos;brand&apos; | &apos;neutral&apos; | &apos;informative&apos; | &apos;successful&apos; | &apos;cautionary&apos; | &apos;destructive&apos;;\n  is?: string;\n  selector?: boolean;\n  disabled?: boolean;\n}&gt;();\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div :class=&quot;[&apos;button&apos;, variant, color]&quot; :aria-disabled=&quot;disabled&quot;&gt;\n    &lt;component class=&quot;center&quot; :is v-bind=&quot;$attrs&quot; :disabled&gt;\n      &lt;slot /&gt;\n    &lt;/component&gt;\n    &lt;span class=&quot;separator&quot; v-if=&quot;selector&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n    &lt;button v-if=&quot;selector&quot; class=&quot;selector&quot; :disabled aria-label=&quot;Toggle options&quot;&gt;\n      &lt;Suspense&gt;\n        &lt;Icon variant=&quot;NavArrowDown&quot; /&gt;\n      &lt;/Suspense&gt;\n    &lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;!-- ... --&gt;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">components/Button.vue</span></p></figcaption></figure><h2 id=\"adding-interaction-states\">Adding Interaction States</h2><p>To implement our interaction states, we&#x2019;ll first define semantic tokens for our state colors. These will be used consistently across all button variants and colors to provide visual feedback for different interactions, and will also be globally available to other components.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-css\">:root {\n  /* ... */\n\n  --color-state-hover: rgb(from var(--primitive-zinc-950) r g b / 0.04);\n  --color-state-focus: rgb(from var(--primitive-zinc-950) r g b / 0.08);\n  --color-state-active: rgb(from var(--primitive-zinc-950) r g b / 0.12);\n}</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">css/semantics.css</span></p></figcaption></figure><h3 id=\"implementing-states-with-colors-and-variants\">Implementing States with Colors and Variants</h3><p>Now we&#x2019;ll update the styles of our button component to handle all interaction states. We&#x2019;ll use a pseudo-element to apply state overlays that will work consistently across all of our colors and variants.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-vue\">&lt;style scoped lang=&quot;scss&quot;&gt;\n.button {\n  overflow: hidden;\n  position: relative;\n  display: inline-flex;\n  gap: 0.25rem;\n  line-height: 1rem;\n  padding: 0.25rem;\n  align-items: center;\n  border-radius: 0.75rem;\n  transition: filter 150ms ease-in-out;\n\n  /* State overlay */\n  &amp;::before {\n    content: &apos;&apos;;\n    display: block;\n    inset: 0;\n    mix-blend-mode: color-burn;\n    pointer-events: none;\n    position: absolute;\n    transition: background-color 150ms ease-in-out;\n  }\n\n  /* Interaction states */\n  &amp;:hover:not([aria-disabled=&quot;true&quot;])::before {\n    background: var(--color-state-hover);\n  }\n\n  &amp;:focus-within:not([aria-disabled=&quot;true&quot;])::before {\n  background: var(--color-state-focus);\n  }\n\n  &amp;:active:not([aria-disabled=&quot;true&quot;])::before {\n  background: var(--color-state-active);\n  }\n\n  /* Disabled state */\n  &amp;[aria-disabled=&quot;true&quot;] {\n    filter: grayscale(0.25) opacity(0.75);\n    pointer-events: none;\n  }\n}\n\n// ...\n&lt;/style&gt;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">components/Button.vue</span></p></figcaption></figure><h2 id=\"updating-the-documentation\">Updating the Documentation</h2><p>Last but not least, let&#x2019;s update the documentation to showcase the new interaction states and provide access to the new&#xA0;<code>disabled</code>&#xA0;property and state. Since we&#x2019;re already using&#xA0;<a href=\"https://storybook.js.org/docs/writing-docs/autodocs?ref=aggregata.de\">Autodocs</a>, we can easily add the new&#xA0;<code>disabled</code>&#xA0;property to the component&#x2019;s individual stories.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-ts\">// ...\n\nexport const Bold: Story = {\n    args: {\n        variant: &apos;bold&apos;,\n        color: &apos;brand&apos;,\n        is: &apos;button&apos;,\n        selector: true,\n        disabled: false,\n        default: &apos;Bold Button&apos;,\n    },\n};\n\nexport const Subtle: Story = {\n    args: {\n        variant: &apos;subtle&apos;,\n        color: &apos;brand&apos;,\n        is: &apos;button&apos;,\n        selector: true,\n        disabled: false,\n        default: &apos;Subtle Button&apos;,\n    },\n};\n\nexport const Outline: Story = {\n    args: {\n        variant: &apos;outline&apos;,\n        color: &apos;brand&apos;,\n        is: &apos;button&apos;,\n        selector: true,\n        disabled: false,\n        default: &apos;Outline Button&apos;,\n    },\n};\n\nexport const Ghost: Story = {\n    args: {\n        variant: &apos;ghost&apos;,\n        color: &apos;brand&apos;,\n        is: &apos;button&apos;,\n        selector: true,\n        disabled: false,\n        default: &apos;Ghost Button&apos;,\n    },\n};</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">stories/Button.stories.ts</span></p></figcaption></figure><hr><h2 id=\"tldr\">TL;DR</h2><p>We&#x2019;ve enhanced our component library&#x2019;s button component by adding interaction states and accessibility features. Implementing hover, focus, active, and disabled states consistently across all variants and colors creates a more robust, user-friendly, and accessible component.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\nWhere we left off\n\nIn the previous article, we expanded our button component by implementing design tokens and color variants. We established a system of primitive and semantic tokens that allowed us to manage colors consistently across both design and development.\nIn this article we’re going to enhance the button component by adding interaction states. This change will extend our designer requirements and ensure that our component provides a smoother user experience.\nNew Requirement: States\n\n:hover: Visual feedback when hovering over the button\n:focus: Clear indication when the button is focused\n:active: Visual feedback when the button is clicked\n:disabled: Distinct appearance when the button is disabled\n\nExtending the Button Component\nFirst, let’s update our button component to support the new disabled state and prepare it for the interaction states we’ll implement. We’ll add a new disabled property and ensure it’s properly passed to both the main button and selector components.\n\n<script setup lang=\"ts\">\nimport Icon from './Icon.vue';\n\ndefineOptions({ inheritAttrs: false });\n\nconst {\n  variant = 'bold',\n  color = 'brand',\n  is = 'button',\n  selector = false,\n  disabled = false,\n} = defineProps<{\n  variant?: 'bold' | 'subtle' | 'outline' | 'ghost';\n  color?: 'brand' | 'neutral' | 'informative' | 'successful' | 'cautionary' | 'destructive';\n  is?: string;\n  selector?: boolean;\n  disabled?: boolean;\n}>();\n</script>\n\n<template>\n  <div :class=\"['button', variant, color]\" :aria-disabled=\"disabled\">\n    <component class=\"center\" :is v-bind=\"$attrs\" :disabled>\n      <slot />\n    </component>\n    <span class=\"separator\" v-if=\"selector\" aria-hidden=\"true\"></span>\n    <button v-if=\"selector\" class=\"selector\" :disabled aria-label=\"Toggle options\">\n      <Suspense>\n        <Icon variant=\"NavArrowDown\" />\n      </Suspense>\n    </button>\n  </div>\n</template>\n\n<!-- ... -->\n\ncomponents/Button.vue\n\nAdding Interaction States\nTo implement our interaction states, we’ll first define semantic tokens for our state colors. These will be used consistently across all button variants and colors to provide visual feedback for different interactions, and will also be globally available to other components.\n\n:root {\n  /* ... */\n\n  --color-state-hover: rgb(from var(--primitive-zinc-950) r g b / 0.04);\n  --color-state-focus: rgb(from var(--primitive-zinc-950) r g b / 0.08);\n  --color-state-active: rgb(from var(--primitive-zinc-950) r g b / 0.12);\n}\n\ncss/semantics.css\n\nImplementing States with Colors and Variants\nNow we’ll update the styles of our button component to handle all interaction states. We’ll use a pseudo-element to apply state overlays that will work consistently across all of our colors and variants.\n\n<style scoped lang=\"scss\">\n.button {\n  overflow: hidden;\n  position: relative;\n  display: inline-flex;\n  gap: 0.25rem;\n  line-height: 1rem;\n  padding: 0.25rem;\n  align-items: center;\n  border-radius: 0.75rem;\n  transition: filter 150ms ease-in-out;\n\n  /* State overlay */\n  &::before {\n    content: '';\n    display: block;\n    inset: 0;\n    mix-blend-mode: color-burn;\n    pointer-events: none;\n    position: absolute;\n    transition: background-color 150ms ease-in-out;\n  }\n\n  /* Interaction states */\n  &:hover:not([aria-disabled=\"true\"])::before {\n    background: var(--color-state-hover);\n  }\n\n  &:focus-within:not([aria-disabled=\"true\"])::before {\n  background: var(--color-state-focus);\n  }\n\n  &:active:not([aria-disabled=\"true\"])::before {\n  background: var(--color-state-active);\n  }\n\n  /* Disabled state */\n  &[aria-disabled=\"true\"] {\n    filter: grayscale(0.25) opacity(0.75);\n    pointer-events: none;\n  }\n}\n\n// ...\n</style>\n\ncomponents/Button.vue\n\nUpdating the Documentation\nLast but not least, let’s update the documentation to showcase the new interaction states and provide access to the new disabled property and state. Since we’re already using Autodocs, we can easily add the new disabled property to the component’s individual stories.\n\n// ...\n\nexport const Bold: Story = {\n    args: {\n        variant: 'bold',\n        color: 'brand',\n        is: 'button',\n        selector: true,\n        disabled: false,\n        default: 'Bold Button',\n    },\n};\n\nexport const Subtle: Story = {\n    args: {\n        variant: 'subtle',\n        color: 'brand',\n        is: 'button',\n        selector: true,\n        disabled: false,\n        default: 'Subtle Button',\n    },\n};\n\nexport const Outline: Story = {\n    args: {\n        variant: 'outline',\n        color: 'brand',\n        is: 'button',\n        selector: true,\n        disabled: false,\n        default: 'Outline Button',\n    },\n};\n\nexport const Ghost: Story = {\n    args: {\n        variant: 'ghost',\n        color: 'brand',\n        is: 'button',\n        selector: true,\n        disabled: false,\n        default: 'Ghost Button',\n    },\n};\n\nstories/Button.stories.ts\n\nTL;DR\nWe’ve enhanced our component library’s button component by adding interaction states and accessibility features. Implementing hover, focus, active, and disabled states consistently across all variants and colors creates a more robust, user-friendly, and accessible component.",
      "dc:creator": "Jairus Joer",
      "content": "Learn how to improve a component library by implementing interaction states for your components and improving the overall user experience.",
      "contentSnippet": "Learn how to improve a component library by implementing interaction states for your components and improving the overall user experience.",
      "guid": "67b4f4c56f69600001e8d1de",
      "categories": [
        "Web",
        "Design"
      ],
      "isoDate": "2025-02-16T23:00:00.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Leverage the View Transition API in any Project",
      "link": "https://aggregata.de/leverage-the-view-transition-api-in-any-project/",
      "pubDate": "Sun, 05 Jan 2025 23:00:00 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><h2 id=\"progressive-enhancements\">Progressive Enhancements</h2><img src=\"https://aggregata.de/content/images/2025/02/cover-en-3.png\" alt=\"Leverage the View Transition API in any Project\"><p>The&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API?ref=aggregata.de\">View Transition API</a>&#xA0;is fairly new to most browsers and hasn&#x2019;t quite reached the defined baseline. While Chromium-based browsers and Safari have either fully or partially implemented the API, it&#x2019;s still in the process of being adopted by browsers like Firefox.</p><p>Fortunately, View Transitions can be treated as a&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement?ref=aggregata.de\">progressive enhancement</a>. This means that we can use the API in our applications and provide a fallback for browsers that don&#x2019;t support it. In this article, we&#x2019;ll explore exactly how to do that.</p><p>You may have already seen the view transitions in action on Aggregata, especially the cross-document view transitions that allow for smooth transitions between the home page and across article pages.</p><h2 id=\"getting-started\">Getting Started</h2><p>In order to properly utilize view transitions where possible while preserving the core functionality of the application, we set up a fallback behavior for unsupported browsers and implemented a new default behavior for browsers that support the API.</p><pre><code class=\"language-ts\">const useViewTransition = (method: Function) =&gt; {\n  if (!document.startViewTransition) {\n    // Fallback behavior\n    method();\n    return;\n  }\n\n  // Default behavior\n  document.startViewTransition(() =&gt; method());\n};</code></pre><pre><code class=\"language-ts\">useViewTransition(() =&gt; customMethodToUpdateDOM());</code></pre><h2 id=\"custom-transitions\">Custom Transitions</h2><p>Now that we&#x2019;ve established a simple method to pick up our DOM manipulations, we can start customizing the transitions to our liking. By default, view transitions use a crossfade to transition between the element snapshots captured by the browser.</p><p>In this case, we use CSS to target our elements and use animations and transitions to create a more engaging experience. The View Transition API provides several pseudo-elements that can be targeted to apply styles. For this demonstration, we&#x2019;ll use the following:</p><ul><li><code>::view-transition-old()</code>:&#xA0;<em>Captured snapshot of the old view.</em></li><li><code>::view-transition-new()</code>:&#xA0;<em>Live represntation of the new view.</em></li></ul><pre><code class=\"language-css\">::view-transition-old(root) {\n  animation: 150ms ease-out both fade-out;\n}\n\n::view-transition-new(root) {\n  animation: 150ms ease-in 150ms both fade-in;\n}</code></pre><p><code>root</code>&#xA0;refers to the&#xA0;<a href=\"https://developer.mozilla.org/de/docs/Web/CSS/:root?ref=aggregata.de\"><code>:root</code><u>&#xA0;</u>pseudo class</a>, which selects the document root element (<code>&lt;html&gt;</code>&#xA0;by default) to animate the entire document on each DOM manipulation. We&#x2019;ll learn how to target specific elements in the next section.</p><h2 id=\"multiple-transitions\">Multiple Transitions</h2><p>By default, view transitions animate the whole document and add a&#xA0;<code>::view-transition</code>&#xA0;overlay. Since we don&#x2019;t want users to wait for each transition, we can exclude the root element from transitions and allow further pointer interaction.</p><pre><code class=\"language-css\">:root {\n  view-transition-name: none;\n}\n\n::view-transition {\n  pointer-events: none;\n}</code></pre><p>The&#xA0;<code>view-transition-name</code>&#xA0;CSS property, as seen above, must be&#xA0;<strong>unique</strong>&#xA0;for each element to be transitioned. While this works wonders for singular and/or unique elements on a page, it becomes a bit more complex when dealing with multiple elements of the same type.</p><pre><code class=\"language-html\">&lt;main&gt;\n  &lt;article style=&quot;view-transition-name: article-41;&quot;&gt;&lt;/article&gt;\n  &lt;article style=&quot;view-transition-name: article-42;&quot;&gt;&lt;/article&gt;\n  &lt;article style=&quot;view-transition-name: article-43;&quot;&gt;&lt;/article&gt;\n&lt;/main&gt;</code></pre><pre><code class=\"language-css\">::view-transition-old(article-41),\n::view-transition-old(article-42),\n::view-transition-old(article-43) {\n  animation: 150ms ease-out both fade-out;\n}\n\n::view-transition-new(article-41),\n::view-transition-new(article-42),\n::view-transition-new(article-43) {\n  animation: 150ms ease-in 150ms both fade-in;\n}</code></pre><p>Instead, we may want to use&#xA0;<code>view-transition-class</code>&#xA0;to apply the transition to all elements with the same class, rather than repeating the properties for each unique name respectively. The above example can thus be reduced to the following selectors:</p><pre><code class=\"language-css\">main &gt; article {\n  view-transition-class: article;\n}\n\n::view-transition-old(.article) {\n  animation: 150ms ease-out both fade-out;\n}\n\n::view-transition-new(.article) {\n  animation: 150ms ease-in 150ms both fade-in;\n}</code></pre><h2 id=\"next-up\">Next up</h2><p>In the next article, we&#x2019;ll explore cross-document view transitions and how multi-page applications can benefit from the View Transition API. We&#x2019;ll cover how to set up the transitions and how to customize them to create an enhanced experience for users across browsers.</p><hr><h2 id=\"tldr\">TL;DR</h2><p>Learn how to leverage the View Transition API to create smooth animations for seamless view transitions in your web applications. This article covers setting up fallbacks for unsupported browsers and customizing transitions for one or multiple elements with CSS.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\nProgressive Enhancements\n\nThe View Transition API is fairly new to most browsers and hasn’t quite reached the defined baseline. While Chromium-based browsers and Safari have either fully or partially implemented the API, it’s still in the process of being adopted by browsers like Firefox.\nFortunately, View Transitions can be treated as a progressive enhancement. This means that we can use the API in our applications and provide a fallback for browsers that don’t support it. In this article, we’ll explore exactly how to do that.\nYou may have already seen the view transitions in action on Aggregata, especially the cross-document view transitions that allow for smooth transitions between the home page and across article pages.\nGetting Started\nIn order to properly utilize view transitions where possible while preserving the core functionality of the application, we set up a fallback behavior for unsupported browsers and implemented a new default behavior for browsers that support the API.\nconst useViewTransition = (method: Function) => {\n  if (!document.startViewTransition) {\n    // Fallback behavior\n    method();\n    return;\n  }\n\n  // Default behavior\n  document.startViewTransition(() => method());\n};\nuseViewTransition(() => customMethodToUpdateDOM());\nCustom Transitions\nNow that we’ve established a simple method to pick up our DOM manipulations, we can start customizing the transitions to our liking. By default, view transitions use a crossfade to transition between the element snapshots captured by the browser.\nIn this case, we use CSS to target our elements and use animations and transitions to create a more engaging experience. The View Transition API provides several pseudo-elements that can be targeted to apply styles. For this demonstration, we’ll use the following:\n\n::view-transition-old(): Captured snapshot of the old view.\n::view-transition-new(): Live represntation of the new view.\n\n::view-transition-old(root) {\n  animation: 150ms ease-out both fade-out;\n}\n\n::view-transition-new(root) {\n  animation: 150ms ease-in 150ms both fade-in;\n}\nroot refers to the :root pseudo class, which selects the document root element (<html> by default) to animate the entire document on each DOM manipulation. We’ll learn how to target specific elements in the next section.\nMultiple Transitions\nBy default, view transitions animate the whole document and add a ::view-transition overlay. Since we don’t want users to wait for each transition, we can exclude the root element from transitions and allow further pointer interaction.\n:root {\n  view-transition-name: none;\n}\n\n::view-transition {\n  pointer-events: none;\n}\nThe view-transition-name CSS property, as seen above, must be unique for each element to be transitioned. While this works wonders for singular and/or unique elements on a page, it becomes a bit more complex when dealing with multiple elements of the same type.\n<main>\n  <article style=\"view-transition-name: article-41;\"></article>\n  <article style=\"view-transition-name: article-42;\"></article>\n  <article style=\"view-transition-name: article-43;\"></article>\n</main>\n::view-transition-old(article-41),\n::view-transition-old(article-42),\n::view-transition-old(article-43) {\n  animation: 150ms ease-out both fade-out;\n}\n\n::view-transition-new(article-41),\n::view-transition-new(article-42),\n::view-transition-new(article-43) {\n  animation: 150ms ease-in 150ms both fade-in;\n}\nInstead, we may want to use view-transition-class to apply the transition to all elements with the same class, rather than repeating the properties for each unique name respectively. The above example can thus be reduced to the following selectors:\nmain > article {\n  view-transition-class: article;\n}\n\n::view-transition-old(.article) {\n  animation: 150ms ease-out both fade-out;\n}\n\n::view-transition-new(.article) {\n  animation: 150ms ease-in 150ms both fade-in;\n}\nNext up\nIn the next article, we’ll explore cross-document view transitions and how multi-page applications can benefit from the View Transition API. We’ll cover how to set up the transitions and how to customize them to create an enhanced experience for users across browsers.\n\nTL;DR\nLearn how to leverage the View Transition API to create smooth animations for seamless view transitions in your web applications. This article covers setting up fallbacks for unsupported browsers and customizing transitions for one or multiple elements with CSS.",
      "dc:creator": "Jairus Joer",
      "content": "Explore the View Transition API and learn how to use it to create smooth transitions between views and pages in a web application.",
      "contentSnippet": "Explore the View Transition API and learn how to use it to create smooth transitions between views and pages in a web application.",
      "guid": "67b4f4536f69600001e8d1cd",
      "categories": [
        "Web",
        "Javascript"
      ],
      "isoDate": "2025-01-05T23:00:00.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Set up a new project with Tailwind CSS 4.0",
      "link": "https://aggregata.de/set-up-a-new-project-with-tailwind-css-4-0/",
      "pubDate": "Sun, 22 Dec 2024 23:00:00 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><img src=\"https://aggregata.de/content/images/2025/02/cover-6.png\" alt=\"Set up a new project with Tailwind CSS 4.0\"><p>Before we begin, please keep in mind that we&#x2019;re approaching the bleeding edge here. Tailwind CSS 4.0 is still in beta and subject to change. If you&#x2019;re okay with that, enjoy this brief introduction to setting up your next project.</p><p>This guide will use the freshly released&#xA0;<a href=\"https://vite.dev/blog/announcing-vite6.html?ref=aggregata.de\">Vite 6.0</a>&#xA0;and the latest&#xA0;<a href=\"https://tailwindcss.com/docs/v4-beta?ref=aggregata.de\">Tailwind CSS 4.0 Beta</a>. While we&#x2019;ll introduce Tailwind into the mix, we&#x2019;ve made sure not to touch much of Vite&#x2019;s original scaffolding. This way you can easily adapt the setup to your needs.</p><h2 id=\"set-up-a-new-project-with-vite\">Set up a new project with Vite</h2><p><a href=\"https://vite.dev/guide/?ref=aggregata.de#scaffolding-your-first-vite-project\">Getting started with Vite</a>&#xA0;is as easy as running the following command in your terminal. When prompted during setup, preferrably select&#xA0;<code>Vanilla</code>&#xA0;and&#xA0;<code>TypeScript</code>&#xA0;as options. Once the setup is complete, navigate to the project directory or open it in your code editor of choice.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-sh\">npm create vite@latest</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">Terminal</span></p></figcaption></figure><h2 id=\"install-tailwind-css\">Install Tailwind CSS</h2><p>Next up is the star of the show, Tailwind CSS 4.0. With version 4, Tailwind&#x2019;s installation has been simplified and its&#xA0;configuration has been moved to a CSS file. All we need to do to enable Tailwind in our project is install the packages and add a few lines to our configuration to load it.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-sh\">npm install tailwindcss@next @tailwindcss/vite@next</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">Terminal</span></p></figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-ts\">import { defineConfig } from &quot;vite&quot;;\nimport tailwindcss from &quot;@tailwindcss/vite&quot;;\n\nexport default defineConfig({\n  plugins: [tailwindcss()],\n});</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">vite.config.ts</span></p></figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-css\">@import &quot;tailwindcss&quot;;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">src/tailwind.css</span></p></figcaption></figure><blockquote>Also, don&#x2019;t forget to load your new CSS file either from&#xA0;<code>main.ts</code>&#xA0;or from&#xA0;<code>index.html</code>.</blockquote><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-ts\">import &apos;./tailwind.css&apos;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">src/main.ts</span></p></figcaption></figure><h2 id=\"configure-a-theme-for-the-project\">Configure a theme for the project</h2><p>For a custom theme, we&#x2019;ll use the&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme?ref=aggregata.de\"><code>color-scheme</code></a>&#xA0;property and&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/light-dark?ref=aggregata.de\"><code>light-dark()</code></a>&#xA0;of CSS to automatically detect and apply the user&#x2019;s preferred color scheme. Since Tailwind injects its&#xA0;modernized P3 color palette&#xA0;as CSS variables, we can easily define a light and dark theme.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-css\">@theme {\n  --color-background: light-dark(var(--color-zinc-100), var(--color-zinc-950));\n  --color-foreground: light-dark(var(--color-zinc-950), var(--color-zinc-100));\n\n  --color-muted: light-dark(var(--color-zinc-50), var(--color-zinc-900));\n  --color-muted-foreground: light-dark(var(--color-zinc-600), var(--color-zinc-400));\n\n  --color-card: var(--background);\n  --color-card-foreground: var(--foreground);\n\n  --color-popover: var(--background);\n  --color-popover-foreground: var(--foreground);\n\n  --color-border: light-dark(var(--color-zinc-200), var(--color-zinc-800));\n\n  --color-input: var(--border);\n\n  --color-primary: var(--foreground);\n  --color-primary-foreground: var(--background);\n\n  --color-secondary: var(--muted);\n  --color-secondary-foreground: var(--foreground);\n\n  --color-accent: light-dark(var(--color-indigo-600), var(--color-indigo-400));\n  --color-accent-foreground: var(--background);\n\n  --color-destructive: light-dark(var(--color-red-600), var(--color-red-400));\n  --color-destructive-foreground: var(--background);\n\n  --color-ring: var(--accent);\n\n  --radius-radius: 0.5rem;\n}</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">src/tailwind.css</span></p></figcaption></figure><p><em>To enable support for&#xA0;<code>light-dark()</code>, set the root&#xA0;<code>color-scheme</code>&#xA0;to&#xA0;<code>light dark</code>.</em></p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-css\">@layer base {\n    :root {\n        color-scheme: light dark;\n    }\n}</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">src/tailwind.css</span></p></figcaption></figure><h2 id=\"use-the-typography-plugin\">Use the Typography plugin</h2><p>To ease the introduction of rich text content, whether in the form of pages or blog posts, we&#x2019;ll use&#xA0;<a href=\"https://github.com/tailwindlabs/tailwindcss-typography?ref=aggregata.de\"><code>@tailwindcss/typography</code></a>&#xA0;and configure it using its built-in CSS variables to add our own custom rich text theme.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-sh\">npm install -D @tailwindcss/typography</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">Terminal</span></p></figcaption></figure><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-css\">@plugin &quot;@tailwindcss/typography&quot;;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">src/tailwind.css</span></p></figcaption></figure><p>As in the previous steps, once you have installed the plugin, simply&#xA0;add it to your<u>&#xA0;</u><code>tailwind.css</code><u>&#xA0;</u>file. Since the typography plugin uses CSS variables for its theme, we can easily define our own theme by setting the variables to our custom colors in the&#xA0;<a href=\"https://tailwindcss.com/docs/v4-beta?ref=aggregata.de#native-css-cascade-layers\"><code>utilities</code><u>&#xA0;</u>CSS layer</a>.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-css\">@layer utilities {\n  .prose-accent {\n    --tw-prose-body: var(--color-muted-foreground);\n    --tw-prose-headings: var(--color-foreground);\n    --tw-prose-lead: var(--color-muted-foreground);\n    --tw-prose-links: var(--color-accent);\n    --tw-prose-bold: var(--color-foreground);\n    --tw-prose-counters: var(--color-accent);\n    --tw-prose-bullets: var(--color-accent);\n    --tw-prose-hr: var(--color-border);\n    --tw-prose-quotes: var(--color-foreground);\n    --tw-prose-quote-borders: var(--color-accent);\n    --tw-prose-captions: var(--color-muted-foreground);\n    --tw-prose-kbd: var(--color-foreground);\n    --tw-prose-kbd-shadows: from var(--color-foreground) r g b;\n    --tw-prose-code: var(--color-foreground);\n    --tw-prose-pre-code: var(--color-foreground);\n    --tw-prose-pre-bg: var(--color-muted);\n    --tw-prose-th-borders: var(--color-border);\n    --tw-prose-td-borders: var(--color-border);\n  }\n}</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">src/tailwind.css</span></p></figcaption></figure><p>And that&#x2019;s it! You&#x2019;ve created a new project with Tailwind CSS 4.0. You can now start building your project with the latest features and improvements of Tailwind CSS. Feel free to customize the configuration to suit your needs.</p><hr><h2 id=\"tldr\">TL:DR</h2><p>To configure a responsive web project, set up your environment with Vite and add Tailwind CSS 4.0 dependencies. Then, implement theme customization via CSS variables and color-scheme options, and enable typography enhancements with plugins.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\nBefore we begin, please keep in mind that we’re approaching the bleeding edge here. Tailwind CSS 4.0 is still in beta and subject to change. If you’re okay with that, enjoy this brief introduction to setting up your next project.\nThis guide will use the freshly released Vite 6.0 and the latest Tailwind CSS 4.0 Beta. While we’ll introduce Tailwind into the mix, we’ve made sure not to touch much of Vite’s original scaffolding. This way you can easily adapt the setup to your needs.\nSet up a new project with Vite\nGetting started with Vite is as easy as running the following command in your terminal. When prompted during setup, preferrably select Vanilla and TypeScript as options. Once the setup is complete, navigate to the project directory or open it in your code editor of choice.\n\nnpm create vite@latest\n\nTerminal\n\nInstall Tailwind CSS\nNext up is the star of the show, Tailwind CSS 4.0. With version 4, Tailwind’s installation has been simplified and its configuration has been moved to a CSS file. All we need to do to enable Tailwind in our project is install the packages and add a few lines to our configuration to load it.\n\nnpm install tailwindcss@next @tailwindcss/vite@next\n\nTerminal\n\nimport { defineConfig } from \"vite\";\nimport tailwindcss from \"@tailwindcss/vite\";\n\nexport default defineConfig({\n  plugins: [tailwindcss()],\n});\n\nvite.config.ts\n\n@import \"tailwindcss\";\n\nsrc/tailwind.css\n\nAlso, don’t forget to load your new CSS file either from main.ts or from index.html.\n\nimport './tailwind.css'\n\nsrc/main.ts\n\nConfigure a theme for the project\nFor a custom theme, we’ll use the color-scheme property and light-dark() of CSS to automatically detect and apply the user’s preferred color scheme. Since Tailwind injects its modernized P3 color palette as CSS variables, we can easily define a light and dark theme.\n\n@theme {\n  --color-background: light-dark(var(--color-zinc-100), var(--color-zinc-950));\n  --color-foreground: light-dark(var(--color-zinc-950), var(--color-zinc-100));\n\n  --color-muted: light-dark(var(--color-zinc-50), var(--color-zinc-900));\n  --color-muted-foreground: light-dark(var(--color-zinc-600), var(--color-zinc-400));\n\n  --color-card: var(--background);\n  --color-card-foreground: var(--foreground);\n\n  --color-popover: var(--background);\n  --color-popover-foreground: var(--foreground);\n\n  --color-border: light-dark(var(--color-zinc-200), var(--color-zinc-800));\n\n  --color-input: var(--border);\n\n  --color-primary: var(--foreground);\n  --color-primary-foreground: var(--background);\n\n  --color-secondary: var(--muted);\n  --color-secondary-foreground: var(--foreground);\n\n  --color-accent: light-dark(var(--color-indigo-600), var(--color-indigo-400));\n  --color-accent-foreground: var(--background);\n\n  --color-destructive: light-dark(var(--color-red-600), var(--color-red-400));\n  --color-destructive-foreground: var(--background);\n\n  --color-ring: var(--accent);\n\n  --radius-radius: 0.5rem;\n}\n\nsrc/tailwind.css\n\nTo enable support for light-dark(), set the root color-scheme to light dark.\n\n@layer base {\n    :root {\n        color-scheme: light dark;\n    }\n}\n\nsrc/tailwind.css\n\nUse the Typography plugin\nTo ease the introduction of rich text content, whether in the form of pages or blog posts, we’ll use @tailwindcss/typography and configure it using its built-in CSS variables to add our own custom rich text theme.\n\nnpm install -D @tailwindcss/typography\n\nTerminal\n\n@plugin \"@tailwindcss/typography\";\n\nsrc/tailwind.css\n\nAs in the previous steps, once you have installed the plugin, simply add it to your tailwind.css file. Since the typography plugin uses CSS variables for its theme, we can easily define our own theme by setting the variables to our custom colors in the utilities CSS layer.\n\n@layer utilities {\n  .prose-accent {\n    --tw-prose-body: var(--color-muted-foreground);\n    --tw-prose-headings: var(--color-foreground);\n    --tw-prose-lead: var(--color-muted-foreground);\n    --tw-prose-links: var(--color-accent);\n    --tw-prose-bold: var(--color-foreground);\n    --tw-prose-counters: var(--color-accent);\n    --tw-prose-bullets: var(--color-accent);\n    --tw-prose-hr: var(--color-border);\n    --tw-prose-quotes: var(--color-foreground);\n    --tw-prose-quote-borders: var(--color-accent);\n    --tw-prose-captions: var(--color-muted-foreground);\n    --tw-prose-kbd: var(--color-foreground);\n    --tw-prose-kbd-shadows: from var(--color-foreground) r g b;\n    --tw-prose-code: var(--color-foreground);\n    --tw-prose-pre-code: var(--color-foreground);\n    --tw-prose-pre-bg: var(--color-muted);\n    --tw-prose-th-borders: var(--color-border);\n    --tw-prose-td-borders: var(--color-border);\n  }\n}\n\nsrc/tailwind.css\n\nAnd that’s it! You’ve created a new project with Tailwind CSS 4.0. You can now start building your project with the latest features and improvements of Tailwind CSS. Feel free to customize the configuration to suit your needs.\n\nTL:DR\nTo configure a responsive web project, set up your environment with Vite and add Tailwind CSS 4.0 dependencies. Then, implement theme customization via CSS variables and color-scheme options, and enable typography enhancements with plugins.",
      "dc:creator": "Jairus Joer",
      "content": "Tailwind CSS version 4.0 has just been released as a beta. In this article, you will learn how to take advantage of the new features in the latest version and how to set up a new project using Vite as a build tool.",
      "contentSnippet": "Tailwind CSS version 4.0 has just been released as a beta. In this article, you will learn how to take advantage of the new features in the latest version and how to set up a new project using Vite as a build tool.",
      "guid": "67b4f3c76f69600001e8d1b8",
      "categories": [
        "Web",
        "Javascript",
        "Framework"
      ],
      "isoDate": "2024-12-22T23:00:00.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Expand a Component Library for Designers and Developers",
      "link": "https://aggregata.de/expand-a-component-library-for-designers-and-developers/",
      "pubDate": "Sun, 10 Nov 2024 23:00:00 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><h2 id=\"where-we-left-off\">Where we Left Off</h2><img src=\"https://aggregata.de/content/images/2025/02/cover-5.png\" alt=\"Expand a Component Library for Designers and Developers\"><p>Previous, we learned how to&#xA0;<a href=\"https://aggregata.de/create-a-component-library-for-designers-and-developers/\" rel=\"noreferrer\">Create a Component Library for Designers and Developers</a>&#xA0;by implementing a fairly simple button component. In this article we&#x2019;ll expand on the previously established foundation and display how to handle more extensive components.</p><p>To facilitate our desired outcome, we&#x2019;ll build on some of the ideas presented in&#xA0;<a href=\"https://aggregata.de/develop-design-systems-with-accessibility-in-mind/\" rel=\"noreferrer\">Develop design systems with accessibility in mind</a>&#xA0;and implement design tokens to manage the colors and appearance of our components during design and development.</p><h2 id=\"new-requirements\">New Requirements</h2><p>Before we get into the specifics of the design tokens, let&#x2019;s add to the previous requirements of our button component. In this particular case, the button component should now cover several color variants to convey its possible actions.</p><h3 id=\"designers-requirements\">Designers Requirements</h3><ul><li><strong>Colors</strong><ul><li><em>Brand</em></li><li><em>Neutral</em></li><li><em>Informative</em></li><li><em>Successful</em></li><li><em>Cautionary</em></li><li><em>Destructive</em></li></ul></li></ul><p>This additional requirement increases the number of variants of the component to 24. While this is still manageable within Figma using&#xA0;<a href=\"https://help.figma.com/hc/en-us/articles/21635177948567-Edit-objects-on-the-canvas-in-bulk?ref=aggregata.de\">Multi Edit</a>, the creeping complexity necessitates a more structured approach to handling variants and their appearance.</p><h2 id=\"design-tokens-in-figma\">Design Tokens in Figma</h2><p>Design tokens, or&#xA0;<a href=\"https://help.figma.com/hc/en-us/articles/15339657135383-Guide-to-variables-in-Figma?ref=aggregata.de\">Variables</a>&#xA0;as they&#x2019;re called in Figma, help us define a consistent design language for our components. To be more precise and flexible in the future, we&#x2019;ll divide the tokens into two groups:&#xA0;<strong>Primitives</strong>&#xA0;and&#xA0;<strong>Semantics</strong>.</p><h3 id=\"primitives\">Primitives</h3><p>Primitives serve as the foundation of our design language. They define base colors and other units to built upon. To start, add the desired colors to the&#xA0;<a href=\"https://help.figma.com/hc/en-us/articles/15145852043927-Create-and-manage-variables?ref=aggregata.de\">Local Variables</a>&#xA0;table. In this example, we&#x2019;ll use the&#xA0;<a href=\"https://tailwindcss.com/docs/customizing-colors?ref=aggregata.de\">Tailwind CSS color palette</a>&#xA0;to define the colors.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://aggregata.de/content/images/2025/03/primitives.png\" class=\"kg-image\" alt=\"Expand a Component Library for Designers and Developers\" loading=\"lazy\" width=\"444\" height=\"288\"></figure><h3 id=\"semantics\">Semantics</h3><p>Semantics built on primitives to expose verbose tokens for our layouts, pages, and components. They reference the primitive tokens and act as an interface to populate the components with the colors defined in the design language.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://aggregata.de/content/images/2025/03/semantics.png\" class=\"kg-image\" alt=\"Expand a Component Library for Designers and Developers\" loading=\"lazy\" width=\"444\" height=\"218\"></figure><p>To recap, raw values like&#xA0;#e4e4e7&#xA0;can be defined as a primitive token like&#xA0;Indigo 600. This primitive token in turn is referenced by one or more semantic tokens such as&#xA0;Brand. In it&#x2019;s fullest, this could take the following form:</p>\n<!--kg-card-begin: html-->\n<table>\n  <thead>\n    <tr>\n      <th>Semantic Token</th>\n      <th></th>\n      <th>Primitive Token</th>\n      <th></th>\n      <th>Raw Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><strong>Border/Width</strong></td>\n      <td>&#x2190;</td>\n      <td></td>\n      <td></td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Neutral/Subtle</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Zinc/200</td>\n      <td>&#x2190;</td>\n      <td>#e4e4e7</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Neutral</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Zinc/950</td>\n      <td>&#x2190;</td>\n      <td>#09090b</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Brand/Subtle</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Indigo/100</td>\n      <td>&#x2190;</td>\n      <td>#e0e7ff</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Brand</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Indigo/600</td>\n      <td>&#x2190;</td>\n      <td>#4f46e5</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Informative/Subtle</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Sky/100</td>\n      <td>&#x2190;</td>\n      <td>#e0f2fe</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Informative</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Sky/600</td>\n      <td>&#x2190;</td>\n      <td>#0284c7</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Successful/Subtle</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Emerald/100</td>\n      <td>&#x2190;</td>\n      <td>#d1fae5</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Successful</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Emerald/600</td>\n      <td>&#x2190;</td>\n      <td>#059669</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Cautionary/Subtle</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Amber/100</td>\n      <td>&#x2190;</td>\n      <td>#fef3c7</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Cautionary</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Amber/600</td>\n      <td>&#x2190;</td>\n      <td>#d97706</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Destructive/Subtle</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Rose/100</td>\n      <td>&#x2190;</td>\n      <td>#ffe4e6</td>\n    </tr>\n    <tr>\n      <td><strong>Color/Destructive</strong></td>\n      <td>&#x2190;</td>\n      <td>Primitive/Rose/600</td>\n      <td>&#x2190;</td>\n      <td>#e11d48</td>\n    </tr>\n  </tbody>\n</table>\n<!--kg-card-end: html-->\n<p>Plugins like&#xA0;<a href=\"https://www.figma.com/community/plugin/1261234393153346915/variables2css?ref=aggregata.de\">variables2css</a>&#xA0;export the defined design tokens in various formats for use in our project. From here on out, we head into the development phase and start by defining the primitives and semantics in CSS.</p><h2 id=\"design-tokens-in-development\">Design Tokens in Development</h2><p>Once the design tokens are exported in their respective formats and implemented in the project, we can start using them in our button component to define the colors and their variants. One way to do this is to define the tokens as CSS variables.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-css\">:root {\n  --primitive-amber-100: #fef3c7;\n  --primitive-amber-400: #fbbf24;\n  --primitive-amber-600: #d97706;\n  --primitive-amber-950: #451a03;\n\n  --primitive-emerald-100: #d1fae5;\n  --primitive-emerald-400: #34d399;\n  --primitive-emerald-600: #059669;\n  --primitive-emerald-950: #022c22;\n\n  --primitive-indigo-100: #e0e7ff;\n  --primitive-indigo-400: #818cf8;\n  --primitive-indigo-600: #4f46e5;\n  --primitive-indigo-950: #1e1b4b;\n\n  --primitive-rose-100: #ffe4e6;\n  --primitive-rose-400: #fb7185;\n  --primitive-rose-600: #e11d48;\n  --primitive-rose-950: #4c0519;\n\n  --primitive-sky-100: #e0f2fe;\n  --primitive-sky-400: #38bdf8;\n  --primitive-sky-600: #0284c7;\n  --primitive-sky-950: #082f49;\n\n  --primitive-zinc-50: #fafafa;\n  --primitive-zinc-100: #f4f4f5;\n  --primitive-zinc-200: #e4e4e7;\n  --primitive-zinc-300: #d4d4d8;\n  --primitive-zinc-400: #a1a1aa;\n  --primitive-zinc-500: #71717a;\n  --primitive-zinc-600: #52525b;\n  --primitive-zinc-700: #3f3f46;\n  --primitive-zinc-800: #27272a;\n  --primitive-zinc-900: #18181b;\n  --primitive-zinc-950: #09090b;\n}</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">css/primitives.css</span></p></figcaption></figure><p>To maintain compatibility between design and development, we implement the same separation of tokens and naming conventions. This way, design tokens can be used and kept in sync in both Figma and the project.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-css\">:root {\n  --border-width: 0.0625rem;\n\n  --color-neutral-subtle: var(--primitive-zinc-200);\n  --color-neutral: var(--primitive-zinc-950);\n\n  --color-brand-subtle: var(--primitive-indigo-100);\n  --color-brand: var(--primitive-indigo-600);\n\n  --color-informative-subtle: var(--primitive-sky-100);\n  --color-informative: var(--primitive-sky-600);\n\n  --color-successful-subtle: var(--primitive-emerald-100);\n  --color-successful: var(--primitive-emerald-600);\n\n  --color-cautionary-subtle: var(--primitive-amber-100);\n  --color-cautionary: var(--primitive-amber-600);\n\n  --color-destructive-subtle: var(--primitive-rose-100);\n  --color-destructive: var(--primitive-rose-600);\n}</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">css/semantics.css</span></p></figcaption></figure><h2 id=\"programmatic-components\">Programmatic Components</h2><p>The rigidity of our design tokens allows us to programmatically generate CSS classes for all colors. Rather than defining classes manually, we rely on&#xA0;<a href=\"https://sass-lang.com/?ref=aggregata.de\">SCSS</a>&#xA0;to generate the classes for us and map their values using scoped CSS variables.</p><p>Further optimization of style generation and CSS bundle size can be achieved using tools such as&#xA0;<a href=\"https://purgecss.com/?ref=aggregata.de\">PurgeCSS</a>&#xA0;or&#xA0;<a href=\"https://tailwindcss.com/docs/adding-custom-styles?ref=aggregata.de#using-css-and-layer\">Tailwind CSS Layers</a>, which automatically remove unused classes and styles and reduce the overhead of programmatically generated classes.</p><p>To update the component in question, we define the color property and add SCSS to generate the necessary classes. Then we update the component to use the updated classes and properties, and then its off to update the documentation to match our changes.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-vue\">&lt;script setup lang=&quot;ts&quot;&gt;\nimport Icon from &apos;./Icon.vue&apos;;\n\ndefineOptions({ inheritAttrs: false });\n\nconst {\n  variant = &apos;bold&apos;,\n  color = &apos;brand&apos;,\n  is = &apos;button&apos;,\n  selector = false,\n} = defineProps&lt;{\n  variant?: &apos;bold&apos; | &apos;subtle&apos; | &apos;outline&apos; | &apos;ghost&apos;;\n  color?: &apos;brand&apos; | &apos;neutral&apos; | &apos;informative&apos; | &apos;successful&apos; | &apos;cautionary&apos; | &apos;destructive&apos;;\n  is?: string;\n  selector?: boolean;\n}&gt;();\n\n&lt;/script&gt;\n\n&lt;template&gt;\n  &lt;div :class=&quot;[&apos;button&apos;, variant, color]&quot;&gt;\n    &lt;component class=&quot;center&quot; :is v-bind=&quot;$attrs&quot;&gt;\n      &lt;slot /&gt;\n    &lt;/component&gt;\n    &lt;span class=&quot;separator&quot; v-if=&quot;selector&quot;&gt;&lt;/span&gt;\n    &lt;button v-if=&quot;selector&quot; class=&quot;selector&quot;&gt;\n      &lt;Suspense&gt;\n        &lt;Icon variant=&quot;NavArrowDown&quot; /&gt;\n      &lt;/Suspense&gt;\n    &lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.button {\n  display: inline-flex;\n  gap: 0.25rem;\n  line-height: 1rem;\n  padding: 0.25rem;\n  align-items: center;\n  border-radius: 0.75rem;\n}\n\n.bold {\n  background: var(--button-color);\n  color: var(--button-color-subtle);\n}\n\n.subtle {\n  background: var(--button-color-subtle);\n  color: var(--button-color);\n}\n\n.outline {\n  box-shadow: inset 0 0 0 var(--border-width) var(--button-color-subtle);\n  color: var(--button-color);\n}\n\n.ghost {\n  color: var(--button-color);\n}\n\n$colors: &apos;brand&apos;, &apos;neutral&apos;, &apos;informative&apos;, &apos;successful&apos;, &apos;cautionary&apos;, &apos;destructive&apos;;\n\n@each $color in $colors {\n  .#{$color} {\n    --button-color: var(--color-#{$color});\n    --button-color-subtle: var(--color-#{$color}-subtle);\n  }\n}\n\n.center {\n  border-radius: 0.5rem;\n  font-weight: 500;\n  font-size: 0.875rem;\n  padding: 0.75rem;\n  white-space: nowrap;\n  text-decoration: unset;\n}\n\n.separator {\n  background: currentColor;\n  height: 1.5rem;\n  width: 0.0625rem;\n}\n\n.selector {\n  display: flex;\n  border-radius: 0.5rem;\n  padding: 0.75rem;\n}\n&lt;/style&gt;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">components/Button.vue</span></p></figcaption></figure><h2 id=\"update-the-documentation\">Update the Documentation</h2><p>Properties and their values are automatically added and updated by Storybook&#x2019;s&#xA0;<a href=\"https://storybook.js.org/docs/writing-docs/autodocs?ref=aggregata.de\">Autodocs</a>&#xA0;feature. We can also improve the usability of components in Storybook by setting argument types for our component to enhance interactions.</p><p>These argument types are part of the&#xA0;<code>meta</code>&#xA0;object in the story definition and are used to generate the controls for the component in Storybook. This way, we can easily switch between the different color variants of the button component.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-ts\">const meta: Meta&lt;typeof Button&gt; = {\n    // ...\n    argTypes: {\n        variant: {\n            control: &apos;select&apos;,\n            options: [&apos;bold&apos;, &apos;subtle&apos;, &apos;outline&apos;, &apos;ghost&apos;],\n        },\n        color: {\n            control: &apos;select&apos;,\n            options: [&apos;brand&apos;, &apos;neutral&apos;, &apos;informative&apos;, &apos;successful&apos;, &apos;cautionary&apos;, &apos;destructive&apos;]\n        },\n    },\n};</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">stories/Button.stories.ts</span></p></figcaption></figure><h2 id=\"next-article\">Next Article</h2><p>In the follow up article, we&#x2019;ll extend the button component by adding states. In particular, we&#x2019;ll cover interaction states such as&#xA0;<code>:hover</code>,&#xA0;<code>:focus</code>,&#xA0;<code>:active</code>&#xA0;and&#xA0;<code>:disabled</code>, and how to implement them in combination with our existing colors and variants.</p><h2 id=\"tldr\">TL;DR</h2><p>Expand a component library using design tokens for consistent color variants. Implement primitive and semantic tokens in Figma and update Storybook documentation for improved developer and designer collaboration.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\nWhere we Left Off\n\nPrevious, we learned how to Create a Component Library for Designers and Developers by implementing a fairly simple button component. In this article we’ll expand on the previously established foundation and display how to handle more extensive components.\nTo facilitate our desired outcome, we’ll build on some of the ideas presented in Develop design systems with accessibility in mind and implement design tokens to manage the colors and appearance of our components during design and development.\nNew Requirements\nBefore we get into the specifics of the design tokens, let’s add to the previous requirements of our button component. In this particular case, the button component should now cover several color variants to convey its possible actions.\nDesigners Requirements\n\nColors\nBrand\nNeutral\nInformative\nSuccessful\nCautionary\nDestructive\n\n\nThis additional requirement increases the number of variants of the component to 24. While this is still manageable within Figma using Multi Edit, the creeping complexity necessitates a more structured approach to handling variants and their appearance.\nDesign Tokens in Figma\nDesign tokens, or Variables as they’re called in Figma, help us define a consistent design language for our components. To be more precise and flexible in the future, we’ll divide the tokens into two groups: Primitives and Semantics.\nPrimitives\nPrimitives serve as the foundation of our design language. They define base colors and other units to built upon. To start, add the desired colors to the Local Variables table. In this example, we’ll use the Tailwind CSS color palette to define the colors.\n\nSemantics\nSemantics built on primitives to expose verbose tokens for our layouts, pages, and components. They reference the primitive tokens and act as an interface to populate the components with the colors defined in the design language.\n\nTo recap, raw values like #e4e4e7 can be defined as a primitive token like Indigo 600. This primitive token in turn is referenced by one or more semantic tokens such as Brand. In it’s fullest, this could take the following form:\nSemantic Token\n      \n      Primitive Token\n      \n      Raw Value\n    \nBorder/Width\n      ←\n      \n      \n      1\n    \nColor/Neutral/Subtle\n      ←\n      Primitive/Zinc/200\n      ←\n      #e4e4e7\n    \nColor/Neutral\n      ←\n      Primitive/Zinc/950\n      ←\n      #09090b\n    \nColor/Brand/Subtle\n      ←\n      Primitive/Indigo/100\n      ←\n      #e0e7ff\n    \nColor/Brand\n      ←\n      Primitive/Indigo/600\n      ←\n      #4f46e5\n    \nColor/Informative/Subtle\n      ←\n      Primitive/Sky/100\n      ←\n      #e0f2fe\n    \nColor/Informative\n      ←\n      Primitive/Sky/600\n      ←\n      #0284c7\n    \nColor/Successful/Subtle\n      ←\n      Primitive/Emerald/100\n      ←\n      #d1fae5\n    \nColor/Successful\n      ←\n      Primitive/Emerald/600\n      ←\n      #059669\n    \nColor/Cautionary/Subtle\n      ←\n      Primitive/Amber/100\n      ←\n      #fef3c7\n    \nColor/Cautionary\n      ←\n      Primitive/Amber/600\n      ←\n      #d97706\n    \nColor/Destructive/Subtle\n      ←\n      Primitive/Rose/100\n      ←\n      #ffe4e6\n    \nColor/Destructive\n      ←\n      Primitive/Rose/600\n      ←\n      #e11d48\n    \nPlugins like variables2css export the defined design tokens in various formats for use in our project. From here on out, we head into the development phase and start by defining the primitives and semantics in CSS.\nDesign Tokens in Development\nOnce the design tokens are exported in their respective formats and implemented in the project, we can start using them in our button component to define the colors and their variants. One way to do this is to define the tokens as CSS variables.\n\n:root {\n  --primitive-amber-100: #fef3c7;\n  --primitive-amber-400: #fbbf24;\n  --primitive-amber-600: #d97706;\n  --primitive-amber-950: #451a03;\n\n  --primitive-emerald-100: #d1fae5;\n  --primitive-emerald-400: #34d399;\n  --primitive-emerald-600: #059669;\n  --primitive-emerald-950: #022c22;\n\n  --primitive-indigo-100: #e0e7ff;\n  --primitive-indigo-400: #818cf8;\n  --primitive-indigo-600: #4f46e5;\n  --primitive-indigo-950: #1e1b4b;\n\n  --primitive-rose-100: #ffe4e6;\n  --primitive-rose-400: #fb7185;\n  --primitive-rose-600: #e11d48;\n  --primitive-rose-950: #4c0519;\n\n  --primitive-sky-100: #e0f2fe;\n  --primitive-sky-400: #38bdf8;\n  --primitive-sky-600: #0284c7;\n  --primitive-sky-950: #082f49;\n\n  --primitive-zinc-50: #fafafa;\n  --primitive-zinc-100: #f4f4f5;\n  --primitive-zinc-200: #e4e4e7;\n  --primitive-zinc-300: #d4d4d8;\n  --primitive-zinc-400: #a1a1aa;\n  --primitive-zinc-500: #71717a;\n  --primitive-zinc-600: #52525b;\n  --primitive-zinc-700: #3f3f46;\n  --primitive-zinc-800: #27272a;\n  --primitive-zinc-900: #18181b;\n  --primitive-zinc-950: #09090b;\n}\n\ncss/primitives.css\n\nTo maintain compatibility between design and development, we implement the same separation of tokens and naming conventions. This way, design tokens can be used and kept in sync in both Figma and the project.\n\n:root {\n  --border-width: 0.0625rem;\n\n  --color-neutral-subtle: var(--primitive-zinc-200);\n  --color-neutral: var(--primitive-zinc-950);\n\n  --color-brand-subtle: var(--primitive-indigo-100);\n  --color-brand: var(--primitive-indigo-600);\n\n  --color-informative-subtle: var(--primitive-sky-100);\n  --color-informative: var(--primitive-sky-600);\n\n  --color-successful-subtle: var(--primitive-emerald-100);\n  --color-successful: var(--primitive-emerald-600);\n\n  --color-cautionary-subtle: var(--primitive-amber-100);\n  --color-cautionary: var(--primitive-amber-600);\n\n  --color-destructive-subtle: var(--primitive-rose-100);\n  --color-destructive: var(--primitive-rose-600);\n}\n\ncss/semantics.css\n\nProgrammatic Components\nThe rigidity of our design tokens allows us to programmatically generate CSS classes for all colors. Rather than defining classes manually, we rely on SCSS to generate the classes for us and map their values using scoped CSS variables.\nFurther optimization of style generation and CSS bundle size can be achieved using tools such as PurgeCSS or Tailwind CSS Layers, which automatically remove unused classes and styles and reduce the overhead of programmatically generated classes.\nTo update the component in question, we define the color property and add SCSS to generate the necessary classes. Then we update the component to use the updated classes and properties, and then its off to update the documentation to match our changes.\n\n<script setup lang=\"ts\">\nimport Icon from './Icon.vue';\n\ndefineOptions({ inheritAttrs: false });\n\nconst {\n  variant = 'bold',\n  color = 'brand',\n  is = 'button',\n  selector = false,\n} = defineProps<{\n  variant?: 'bold' | 'subtle' | 'outline' | 'ghost';\n  color?: 'brand' | 'neutral' | 'informative' | 'successful' | 'cautionary' | 'destructive';\n  is?: string;\n  selector?: boolean;\n}>();\n\n</script>\n\n<template>\n  <div :class=\"['button', variant, color]\">\n    <component class=\"center\" :is v-bind=\"$attrs\">\n      <slot />\n    </component>\n    <span class=\"separator\" v-if=\"selector\"></span>\n    <button v-if=\"selector\" class=\"selector\">\n      <Suspense>\n        <Icon variant=\"NavArrowDown\" />\n      </Suspense>\n    </button>\n  </div>\n</template>\n\n<style scoped lang=\"scss\">\n.button {\n  display: inline-flex;\n  gap: 0.25rem;\n  line-height: 1rem;\n  padding: 0.25rem;\n  align-items: center;\n  border-radius: 0.75rem;\n}\n\n.bold {\n  background: var(--button-color);\n  color: var(--button-color-subtle);\n}\n\n.subtle {\n  background: var(--button-color-subtle);\n  color: var(--button-color);\n}\n\n.outline {\n  box-shadow: inset 0 0 0 var(--border-width) var(--button-color-subtle);\n  color: var(--button-color);\n}\n\n.ghost {\n  color: var(--button-color);\n}\n\n$colors: 'brand', 'neutral', 'informative', 'successful', 'cautionary', 'destructive';\n\n@each $color in $colors {\n  .#{$color} {\n    --button-color: var(--color-#{$color});\n    --button-color-subtle: var(--color-#{$color}-subtle);\n  }\n}\n\n.center {\n  border-radius: 0.5rem;\n  font-weight: 500;\n  font-size: 0.875rem;\n  padding: 0.75rem;\n  white-space: nowrap;\n  text-decoration: unset;\n}\n\n.separator {\n  background: currentColor;\n  height: 1.5rem;\n  width: 0.0625rem;\n}\n\n.selector {\n  display: flex;\n  border-radius: 0.5rem;\n  padding: 0.75rem;\n}\n</style>\n\ncomponents/Button.vue\n\nUpdate the Documentation\nProperties and their values are automatically added and updated by Storybook’s Autodocs feature. We can also improve the usability of components in Storybook by setting argument types for our component to enhance interactions.\nThese argument types are part of the meta object in the story definition and are used to generate the controls for the component in Storybook. This way, we can easily switch between the different color variants of the button component.\n\nconst meta: Meta<typeof Button> = {\n    // ...\n    argTypes: {\n        variant: {\n            control: 'select',\n            options: ['bold', 'subtle', 'outline', 'ghost'],\n        },\n        color: {\n            control: 'select',\n            options: ['brand', 'neutral', 'informative', 'successful', 'cautionary', 'destructive']\n        },\n    },\n};\n\nstories/Button.stories.ts\n\nNext Article\nIn the follow up article, we’ll extend the button component by adding states. In particular, we’ll cover interaction states such as :hover, :focus, :active and :disabled, and how to implement them in combination with our existing colors and variants.\nTL;DR\nExpand a component library using design tokens for consistent color variants. Implement primitive and semantic tokens in Figma and update Storybook documentation for improved developer and designer collaboration.",
      "dc:creator": "Jairus Joer",
      "content": "Discover how to extend a component library with design tokens. Learn how to efficiently manage design tokens and components for designers and developers in Figma, Storybook and Vue.",
      "contentSnippet": "Discover how to extend a component library with design tokens. Learn how to efficiently manage design tokens and components for designers and developers in Figma, Storybook and Vue.",
      "guid": "67b4f25f6f69600001e8d19e",
      "categories": [
        "Web",
        "Design"
      ],
      "isoDate": "2024-11-10T23:00:00.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Create a Component Library for Designers and Developers",
      "link": "https://aggregata.de/create-a-component-library-for-designers-and-developers/",
      "pubDate": "Mon, 28 Oct 2024 23:00:00 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><h2 id=\"where-we-left-off\">Where we left off</h2><img src=\"https://aggregata.de/content/images/2025/02/cover-4.png\" alt=\"Create a Component Library for Designers and Developers\"><p>In the&#xA0;<a href=\"https://aggregata.de/define-a-component-library-for-designers-and-developers/\" rel=\"noreferrer\">previous article</a>, we explored how to define a component library based on the premise of communication. In this article, we will continue to explore the implementation of a component library for designers and developers alike, incorporating what we have learned so far.</p><h2 id=\"requirements\">Requirements</h2><p>The first step is for designers and developers to outline the requirements for the component in question. In our case, we will focus on a button component with an optional drop-down menu.</p><h3 id=\"designers-requirements\">Designers requirements</h3><ul><li><strong>Variants</strong>:&#xA0;<em>Bold, Subtle, Outline, Ghost</em></li><li><strong>Label</strong>:&#xA0;<em>Optional text to be displayed</em></li><li><strong>Icon</strong>:&#xA0;<em>Optional icon besides label</em></li></ul><h3 id=\"developers-requirements\">Developers requirements</h3><ul><li><strong>Agnostic</strong>:&#xA0;<em>Supports HTML elements such as&#xA0;<code>&lt;a&gt;</code>&#xA0;or&#xA0;<code>&lt;button&gt;</code></em></li><li><strong>Options</strong>:&#xA0;<em>Reusable as a selector interface for options</em></li><li><strong>Accessible</strong>:&#xA0;<em>Provides a title and is visibly focusable</em></li></ul><p>At this stage, we can already identify future pain points: Variants and extensibility. Currently, designers request 4 variants for a color theme. In the future, however, we&#x2019;ll need to expand the number of themes to cover more options.</p><p>To put this into perspective, let&#x2019;s look into the future: Eventually we&#x2019;ll have 4 variants for 6 colors and 4 states per variant. This would result in 96 possible combinations. That is a lot of work for designers and developers to provide access to and maintain properly.</p><hr><blockquote>How to overcome the creeping complexity of components is a topic we&#x2019;ll explore later in the series on component libraries. For now, let&#x2019;s focus on the initial requirements and stick to one color and 4 variants.</blockquote><hr><h2 id=\"design\">Design</h2><p>In Figma, the first draft of the new component is quickly created. It already contains the necessary elements, but lacks the variants. Before we get to that, let&#x2019;s take a look at the initial component as a starting point.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://aggregata.de/content/images/2025/03/example-component.png\" class=\"kg-image\" alt=\"Create a Component Library for Designers and Developers\" loading=\"lazy\" width=\"2000\" height=\"400\" srcset=\"https://aggregata.de/content/images/size/w600/2025/03/example-component.png 600w, https://aggregata.de/content/images/size/w1000/2025/03/example-component.png 1000w, https://aggregata.de/content/images/size/w1600/2025/03/example-component.png 1600w, https://aggregata.de/content/images/2025/03/example-component.png 2160w\" sizes=\"(min-width: 720px) 720px\"></figure><p>From here on, we&#xA0;<a href=\"https://help.figma.com/hc/en-us/articles/5579474826519-Explore-component-properties?ref=aggregata.de\">set up the component properties</a>&#xA0;to allow for easy combinations of label, icon, and selector elements within a variant. We now have 6 possible combinations of elements to choose from within one variant.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://aggregata.de/content/images/2025/03/example-component-combinations.png\" class=\"kg-image\" alt=\"Create a Component Library for Designers and Developers\" loading=\"lazy\" width=\"2000\" height=\"928\" srcset=\"https://aggregata.de/content/images/size/w600/2025/03/example-component-combinations.png 600w, https://aggregata.de/content/images/size/w1000/2025/03/example-component-combinations.png 1000w, https://aggregata.de/content/images/size/w1600/2025/03/example-component-combinations.png 1600w, https://aggregata.de/content/images/2025/03/example-component-combinations.png 2160w\" sizes=\"(min-width: 720px) 720px\"></figure><p>Once our initial component is properly set up, we can&#xA0;<a href=\"https://help.figma.com/hc/en-us/articles/360056440594-Create-and-use-variants?ref=aggregata.de\">create and use variants</a>&#xA0;to compose the desired variants of our button component. The previously set properties are automatically reapplied where applicable.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://aggregata.de/content/images/2025/03/example-component-variants.png\" class=\"kg-image\" alt=\"Create a Component Library for Designers and Developers\" loading=\"lazy\" width=\"2000\" height=\"1067\" srcset=\"https://aggregata.de/content/images/size/w600/2025/03/example-component-variants.png 600w, https://aggregata.de/content/images/size/w1000/2025/03/example-component-variants.png 1000w, https://aggregata.de/content/images/size/w1600/2025/03/example-component-variants.png 1600w, https://aggregata.de/content/images/2025/03/example-component-variants.png 2160w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"hand-off\">Hand-Off</h2><p>One way to share the component with developers is to use Figma&#x2019;s built-in&#xA0;<a href=\"https://www.figma.com/dev-mode/?ref=aggregata.de\">Dev Mode</a>. This feature automatically exposes detailed information about the component, such as its properties and variants, to developers.</p><p>The hand-off itself is a very individual process and can be done in a variety of ways. Some teams prefer to use tools like&#xA0;<a href=\"https://zeplin.io/?ref=aggregata.de\">Zeplin</a>, while others prefer a more direct approach, such as sharing a link to the figma file or using a shared folder.</p><h2 id=\"develop\">Develop</h2><p>Developing the actual component comes down to deciding on a concise approach. In this case, we&#x2019;ll use&#xA0;<a href=\"https://vuejs.org/?ref=aggregata.de\">Vue 3</a>&#xA0;with the Composition API. This allows us to define the component in a single file, making it easier to maintain and understand.</p><p>Note that this is not the only way to create components. A popular example would be&#xA0;<a href=\"https://daisyui.com/?ref=aggregata.de\">daisyUI</a>, which uses&#xA0;<a href=\"https://tailwindcss.com/?ref=aggregata.de\">TailwindCSS</a>&#xA0;and custom classes to simplify the creation of components, relying only on basic HTML elements and CSS to structure them.</p><blockquote>Please be aware that the&#xA0;<code>&lt;Icon /&gt;</code>&#xA0;component is not included in the code snippet.</blockquote><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-vue\">&lt;script setup lang=&quot;ts&quot;&gt;\nimport Icon from &apos;./Icon.vue&apos;;\n\ndefineOptions({ inheritAttrs: false });\n\nconst { variant = &apos;bold&apos;, is = &apos;button&apos;, selector = false } = defineProps&lt;{\n    variant?: &apos;bold&apos; | &apos;subtle&apos; | &apos;outline&apos; | &apos;ghost&apos;;\n    is?: string;\n    selector?: boolean;\n}&gt;();\n&lt;/script&gt;\n\n&lt;template&gt;\n    &lt;div :class=&quot;`button-${variant}`&quot;&gt;\n        &lt;component class=&quot;center&quot; :is=&quot;is || &apos;button&apos;&quot; v-bind=&quot;$attrs&quot;&gt;\n            &lt;slot /&gt;\n        &lt;/component&gt;\n        &lt;span class=&quot;separator&quot; v-if=&quot;selector&quot;&gt;&lt;/span&gt;\n        &lt;button v-if=&quot;selector&quot; class=&quot;selector&quot;&gt;\n            &lt;Suspense&gt;\n                &lt;Icon variant=&quot;NavArrowDown&quot; /&gt;\n            &lt;/Suspense&gt;\n        &lt;/button&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;style scoped&gt;\nbutton {\n    background: unset;\n    color: inherit;\n    border: unset;\n}\n\n[class^=&apos;button-&apos;] {\n    display: inline-flex;\n    gap: 0.25rem;\n    line-height: 1rem;\n    padding: 0.25rem;\n    align-items: center;\n    border-radius: 0.75rem;\n}\n\n.button-bold {\n    background: #4f46e5;\n    color: #e0e7ff;\n}\n\n.button-subtle {\n    color: #4f46e5;\n    background: #e0e7ff;\n}\n\n.button-outline {\n    color: #4f46e5;\n    border: 0.0625rem solid #e0e7ff;\n}\n\n.button-ghost {\n    color: #4f46e5;\n}\n\n.center {\n    border-radius: 0.5rem;\n    font-weight: 500;\n    font-size: 0.875rem;\n    padding: 0.75rem;\n}\n\n.separator {\n    background: currentColor;\n    height: 1.5rem;\n    width: 0.0625rem;\n}\n\n.selector {\n    display: flex;\n    border-radius: 0.5rem;\n    padding: 0.75rem;\n}\n&lt;/style&gt;</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">components/Button.vue</span></p></figcaption></figure><hr><pre><code class=\"language-vue\">&lt;template&gt;\n    &lt;Button&gt;\n        &lt;span&gt;Hello World&lt;/span&gt;\n        &lt;Icon variant=&quot;ArrowRight&quot; /&gt;\n    &lt;/Button&gt;\n&lt;/template&gt;</code></pre><h2 id=\"document\">Document</h2><p>For both designers and developers, documentation serves as a reference point for the component&#x2019;s properties and variants. This can be done in a variety of ways, from a simple documentation site like&#xA0;<a href=\"https://docusaurus.io/?ref=aggregata.de\">Docusaurus</a>&#xA0;to a more elaborate documentation tool like&#xA0;<a href=\"https://storybook.js.org/?ref=aggregata.de\">Storybook</a>.</p><p>In our case, we&#x2019;ll use Storybook to document the component. This allows us to show the component in different states and variants, as well as provide detailed information about its properties when needed.</p><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-ts\">import type { Meta, StoryObj } from &apos;@storybook/vue3&apos;;\nimport Button from &apos;../components/Button.vue&apos;;\n\nconst meta: Meta&lt;typeof Button&gt; = {\n    component: Button,\n    parameters: {\n        slots: {\n            default: {\n                template: `&lt;span&gt;{{ args.default }}&lt;/span&gt;`,\n            }\n        }\n    }\n};\n\nexport default meta;\ntype Story = StoryObj&lt;typeof Button&gt;;\n\nexport const Bold: Story = {\n    args: {\n        variant: &apos;bold&apos;,\n        is: &apos;button&apos;,\n        selector: true,\n        default: &apos;Bold Button&apos;,\n    },\n};\n\nexport const Subtle: Story = {\n    args: {\n        variant: &apos;subtle&apos;,\n        is: &apos;button&apos;,\n        selector: true,\n        default: &apos;Subtle Button&apos;,\n    },\n};\n\nexport const Outline: Story = {\n    args: {\n        variant: &apos;outline&apos;,\n        is: &apos;button&apos;,\n        selector: true,\n        default: &apos;Outline Button&apos;,\n    },\n};\n\nexport const Ghost: Story = {\n    args: {\n        variant: &apos;ghost&apos;,\n        is: &apos;button&apos;,\n        selector: true,\n        default: &apos;Ghost Button&apos;,\n    },\n};</code></pre><figcaption><p><span style=\"white-space: pre-wrap;\">stories/Button.stories.ts</span></p></figcaption></figure><p>Using Storybook&#x2019;s&#xA0;<a href=\"https://storybook.js.org/docs/writing-docs/autodocs?ref=aggregata.de\">Autodocs</a>&#xA0;feature, we can automatically generate documentation for the component based on its exposed properties and variants in the&#xA0;<code>Button.stories.ts</code>&#xA0;file</p><figure class=\"kg-card kg-image-card\"><img src=\"https://aggregata.de/content/images/2025/03/example-storybook.png\" class=\"kg-image\" alt=\"Create a Component Library for Designers and Developers\" loading=\"lazy\" width=\"1200\" height=\"1000\" srcset=\"https://aggregata.de/content/images/size/w600/2025/03/example-storybook.png 600w, https://aggregata.de/content/images/size/w1000/2025/03/example-storybook.png 1000w, https://aggregata.de/content/images/2025/03/example-storybook.png 1200w\" sizes=\"(min-width: 720px) 720px\"></figure><h2 id=\"maintain\">Maintain</h2><p>Now that we&#x2019;ve conceptualized, designed, developed, and documented our&#xA0;<code>&lt;Button&gt;</code>&#xA0;component, we need to maintain it. This includes keeping the component up to date with the latest design changes, fixing bugs, and adding new features as needed.</p><p>The task of maintenance cuts across all of the previous steps, as it is a shared responsibility between teams to keep design, development, and documentation in sync. Once a proper process is established, maintaining the component becomes much easier.</p><h2 id=\"next-article\">Next article</h2><p>Congratulations. You&#x2019;ve taken the first steps toward creating a component library for your project or organization. While this article only covers the general approach, the next article will delve into the specifics of how to manage component complexity and keep it maintainable.</p><p>To accomplish this, we&#x2019;ll also look back at previous articles such as&#xA0;<a href=\"https://aggregata.de/develop-design-systems-with-accessibility-in-mind/\" rel=\"noreferrer\">Develop design systems with accessibility in mind</a>, and how the patterns presented there can be applied to facilitate component library development.</p><hr><h2 id=\"tldr\">TL;DR</h2><p>We&#x2019;ve explored how to create a basic component library using a single component as a starting point. The process includes defining requirements, designing the component, handing it off to developers, developing the component, documenting it, and maintaining it.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\nWhere we left off\n\nIn the previous article, we explored how to define a component library based on the premise of communication. In this article, we will continue to explore the implementation of a component library for designers and developers alike, incorporating what we have learned so far.\nRequirements\nThe first step is for designers and developers to outline the requirements for the component in question. In our case, we will focus on a button component with an optional drop-down menu.\nDesigners requirements\n\nVariants: Bold, Subtle, Outline, Ghost\nLabel: Optional text to be displayed\nIcon: Optional icon besides label\n\nDevelopers requirements\n\nAgnostic: Supports HTML elements such as <a> or <button>\nOptions: Reusable as a selector interface for options\nAccessible: Provides a title and is visibly focusable\n\nAt this stage, we can already identify future pain points: Variants and extensibility. Currently, designers request 4 variants for a color theme. In the future, however, we’ll need to expand the number of themes to cover more options.\nTo put this into perspective, let’s look into the future: Eventually we’ll have 4 variants for 6 colors and 4 states per variant. This would result in 96 possible combinations. That is a lot of work for designers and developers to provide access to and maintain properly.\n\nHow to overcome the creeping complexity of components is a topic we’ll explore later in the series on component libraries. For now, let’s focus on the initial requirements and stick to one color and 4 variants.\n\nDesign\nIn Figma, the first draft of the new component is quickly created. It already contains the necessary elements, but lacks the variants. Before we get to that, let’s take a look at the initial component as a starting point.\n\nFrom here on, we set up the component properties to allow for easy combinations of label, icon, and selector elements within a variant. We now have 6 possible combinations of elements to choose from within one variant.\n\nOnce our initial component is properly set up, we can create and use variants to compose the desired variants of our button component. The previously set properties are automatically reapplied where applicable.\n\nHand-Off\nOne way to share the component with developers is to use Figma’s built-in Dev Mode. This feature automatically exposes detailed information about the component, such as its properties and variants, to developers.\nThe hand-off itself is a very individual process and can be done in a variety of ways. Some teams prefer to use tools like Zeplin, while others prefer a more direct approach, such as sharing a link to the figma file or using a shared folder.\nDevelop\nDeveloping the actual component comes down to deciding on a concise approach. In this case, we’ll use Vue 3 with the Composition API. This allows us to define the component in a single file, making it easier to maintain and understand.\nNote that this is not the only way to create components. A popular example would be daisyUI, which uses TailwindCSS and custom classes to simplify the creation of components, relying only on basic HTML elements and CSS to structure them.\nPlease be aware that the <Icon /> component is not included in the code snippet.\n\n<script setup lang=\"ts\">\nimport Icon from './Icon.vue';\n\ndefineOptions({ inheritAttrs: false });\n\nconst { variant = 'bold', is = 'button', selector = false } = defineProps<{\n    variant?: 'bold' | 'subtle' | 'outline' | 'ghost';\n    is?: string;\n    selector?: boolean;\n}>();\n</script>\n\n<template>\n    <div :class=\"`button-${variant}`\">\n        <component class=\"center\" :is=\"is || 'button'\" v-bind=\"$attrs\">\n            <slot />\n        </component>\n        <span class=\"separator\" v-if=\"selector\"></span>\n        <button v-if=\"selector\" class=\"selector\">\n            <Suspense>\n                <Icon variant=\"NavArrowDown\" />\n            </Suspense>\n        </button>\n    </div>\n</template>\n\n<style scoped>\nbutton {\n    background: unset;\n    color: inherit;\n    border: unset;\n}\n\n[class^='button-'] {\n    display: inline-flex;\n    gap: 0.25rem;\n    line-height: 1rem;\n    padding: 0.25rem;\n    align-items: center;\n    border-radius: 0.75rem;\n}\n\n.button-bold {\n    background: #4f46e5;\n    color: #e0e7ff;\n}\n\n.button-subtle {\n    color: #4f46e5;\n    background: #e0e7ff;\n}\n\n.button-outline {\n    color: #4f46e5;\n    border: 0.0625rem solid #e0e7ff;\n}\n\n.button-ghost {\n    color: #4f46e5;\n}\n\n.center {\n    border-radius: 0.5rem;\n    font-weight: 500;\n    font-size: 0.875rem;\n    padding: 0.75rem;\n}\n\n.separator {\n    background: currentColor;\n    height: 1.5rem;\n    width: 0.0625rem;\n}\n\n.selector {\n    display: flex;\n    border-radius: 0.5rem;\n    padding: 0.75rem;\n}\n</style>\n\ncomponents/Button.vue\n\n<template>\n    <Button>\n        <span>Hello World</span>\n        <Icon variant=\"ArrowRight\" />\n    </Button>\n</template>\nDocument\nFor both designers and developers, documentation serves as a reference point for the component’s properties and variants. This can be done in a variety of ways, from a simple documentation site like Docusaurus to a more elaborate documentation tool like Storybook.\nIn our case, we’ll use Storybook to document the component. This allows us to show the component in different states and variants, as well as provide detailed information about its properties when needed.\n\nimport type { Meta, StoryObj } from '@storybook/vue3';\nimport Button from '../components/Button.vue';\n\nconst meta: Meta<typeof Button> = {\n    component: Button,\n    parameters: {\n        slots: {\n            default: {\n                template: `<span>{{ args.default }}</span>`,\n            }\n        }\n    }\n};\n\nexport default meta;\ntype Story = StoryObj<typeof Button>;\n\nexport const Bold: Story = {\n    args: {\n        variant: 'bold',\n        is: 'button',\n        selector: true,\n        default: 'Bold Button',\n    },\n};\n\nexport const Subtle: Story = {\n    args: {\n        variant: 'subtle',\n        is: 'button',\n        selector: true,\n        default: 'Subtle Button',\n    },\n};\n\nexport const Outline: Story = {\n    args: {\n        variant: 'outline',\n        is: 'button',\n        selector: true,\n        default: 'Outline Button',\n    },\n};\n\nexport const Ghost: Story = {\n    args: {\n        variant: 'ghost',\n        is: 'button',\n        selector: true,\n        default: 'Ghost Button',\n    },\n};\n\nstories/Button.stories.ts\n\nUsing Storybook’s Autodocs feature, we can automatically generate documentation for the component based on its exposed properties and variants in the Button.stories.ts file\n\nMaintain\nNow that we’ve conceptualized, designed, developed, and documented our <Button> component, we need to maintain it. This includes keeping the component up to date with the latest design changes, fixing bugs, and adding new features as needed.\nThe task of maintenance cuts across all of the previous steps, as it is a shared responsibility between teams to keep design, development, and documentation in sync. Once a proper process is established, maintaining the component becomes much easier.\nNext article\nCongratulations. You’ve taken the first steps toward creating a component library for your project or organization. While this article only covers the general approach, the next article will delve into the specifics of how to manage component complexity and keep it maintainable.\nTo accomplish this, we’ll also look back at previous articles such as Develop design systems with accessibility in mind, and how the patterns presented there can be applied to facilitate component library development.\n\nTL;DR\nWe’ve explored how to create a basic component library using a single component as a starting point. The process includes defining requirements, designing the component, handing it off to developers, developing the component, documenting it, and maintaining it.",
      "dc:creator": "Jairus Joer",
      "content": "Explore the process of creating a component library for designers and developers using an example component, from defining the requirements to maintaining the library.",
      "contentSnippet": "Explore the process of creating a component library for designers and developers using an example component, from defining the requirements to maintaining the library.",
      "guid": "67b4f1d86f69600001e8d189",
      "categories": [
        "Web",
        "Design"
      ],
      "isoDate": "2024-10-28T23:00:00.000Z"
    },
    {
      "creator": "Henrik Bartsch",
      "title": "Adapting and Evolving: Year Two of Aggregata",
      "link": "https://aggregata.de/adapting-and-evolving-year-two-of-aggregata/",
      "pubDate": "Sun, 13 Oct 2024 22:00:00 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><img src=\"https://aggregata.de/content/images/2025/02/cover_en-1.png\" alt=\"Adapting and Evolving: Year Two of Aggregata\"><p>2024 was a big year for machine learning, with advancements in large language models like&#xA0;<a href=\"https://huggingface.co/google/gemma-2b?ref=aggregata.de\">Gemma</a>&#xA0;and&#xA0;<a href=\"https://huggingface.co/google/gemma-2-2b?ref=aggregata.de\">Gemma 2</a>, and improvements in image understanding using neural networks.</p><p>As Aggregata enters its second year, we&#x2019;re reflecting on the incredible progress we&#x2019;ve made. Let&#x2019;s dive into the key changes we&#x2019;ve implemented.</p><hr><h3 id=\"improvements-to-our-website\">Improvements to our website</h3><p>We&#x2019;ve implemented several quality-of-life improvements, including:</p><ul><li><strong>Recommended articles:</strong>&#xA0;Every post now has relevant articles to help users explore further.</li><li><strong>Table of contents:</strong>&#xA0;This makes it easier to navigate and understand the content.</li><li><strong>Filter:</strong>&#xA0;Users can now easily select specific areas of interest.</li></ul><p>These features enhance user experience and improve the platform&#x2019;s overall functionality.</p><hr><h3 id=\"improvements-to-our-content\">Improvements to our content</h3><p>We&#x2019;re updating our content to keep up with the tech curve or stay ahead! Here&#x2019;s what&#x2019;s new:</p><ul><li><strong>Web</strong>: As part of an intensified learning curve, we explored&#xA0;<a href=\"https://aggregata.de/develop-design-systems-with-accessibility-in-mind/\" rel=\"noreferrer\">design systems</a>&#xA0;and their underlying definitions,&#xA0;<a href=\"https://aggregata.de/accessibility-a-necessity-not-an-afterthought/\" rel=\"noreferrer\">accessibility</a>&#xA0;and its general application on the web, and lastly increased the number of entries in one of our favourite series,&#xA0;<a href=\"https://aggregata.de/dynamic-imports-with-alpine/\" rel=\"noreferrer\">Alpine.js</a>.</li><li><strong>Machine Learning Deep Dive:</strong>&#xA0;We explored reinforcement and unsupervised learning, with articles on&#xA0;<a href=\"https://aggregata.de/actor-critic/\" rel=\"noreferrer\">Policy Gradient Reinforcement Learning</a>,&#xA0;<a href=\"https://aggregata.de/random-projections/\" rel=\"noreferrer\">Random Projections</a>, and pre-trained transformers like&#xA0;<a href=\"https://aggregata.de/matcha-quarta/\" rel=\"noreferrer\">Matcha-Quarta</a>.</li></ul><p>This means you&#x2019;ll have even more valuable resources to learn about the latest technologies.</p><hr><h3 id=\"our-year-in-numbers\">Our year in numbers</h3><div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-text\"><b><strong style=\"white-space: pre-wrap;\">25&#xA0;Articles</strong></b> were published this year. Pretty much one article every two weeks.</div></div><div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-text\"><b><strong style=\"white-space: pre-wrap;\">8,450&#xA0;Readers</strong></b> are now reached every month. A monthly increase of ~500.</div></div><hr><h3 id=\"upcoming-improvements\">Upcoming Improvements</h3><p>Building on the current success of Aggregata, we can now focus on more complex topics. As a first step, we&#x2019;re taking a look at how we can better use pre-trained transformers to generate the environment around our articles, such as finding sources for information, generating article cover images, or other fields.</p><blockquote>Learn&#xA0;<a href=\"https://aggregata.de/how-we-use-deep-learning-models/\" rel=\"noreferrer\">How we use machine learning to create our articles</a></blockquote><p>We&#x2019;re also looking to upgrade our content management system (CMS) to meet the increasing demands of both ourselves and our readers. Our new site therefore will run on&#xA0;<a href=\"https://ghost.org/docs/?ref=aggregata.de\">Ghost</a>.</p><blockquote>Discover&#xA0;<a href=\"https://aggregata.de/why-we-are-moving-aggregata-from-astro-to-ghost/\" rel=\"noreferrer\">Why we are moving Aggregata from Astro to Ghost</a></blockquote><p>As for our next article, we plan to build on our&#xA0;<a href=\"https://aggregata.de/define-a-component-library-for-designers-and-developers/\" rel=\"noreferrer\">recent article on component libraries</a>&#xA0;with&#xA0;<strong><em>Create a Component Library for Designers and Developers</em></strong>. Look out for it in the next two weeks.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\n2024 was a big year for machine learning, with advancements in large language models like Gemma and Gemma 2, and improvements in image understanding using neural networks.\nAs Aggregata enters its second year, we’re reflecting on the incredible progress we’ve made. Let’s dive into the key changes we’ve implemented.\n\nImprovements to our website\nWe’ve implemented several quality-of-life improvements, including:\n\nRecommended articles: Every post now has relevant articles to help users explore further.\nTable of contents: This makes it easier to navigate and understand the content.\nFilter: Users can now easily select specific areas of interest.\n\nThese features enhance user experience and improve the platform’s overall functionality.\n\nImprovements to our content\nWe’re updating our content to keep up with the tech curve or stay ahead! Here’s what’s new:\n\nWeb: As part of an intensified learning curve, we explored design systems and their underlying definitions, accessibility and its general application on the web, and lastly increased the number of entries in one of our favourite series, Alpine.js.\nMachine Learning Deep Dive: We explored reinforcement and unsupervised learning, with articles on Policy Gradient Reinforcement Learning, Random Projections, and pre-trained transformers like Matcha-Quarta.\n\nThis means you’ll have even more valuable resources to learn about the latest technologies.\n\nOur year in numbers\n\n25 Articles were published this year. Pretty much one article every two weeks.\n\n8,450 Readers are now reached every month. A monthly increase of ~500.\n\nUpcoming Improvements\nBuilding on the current success of Aggregata, we can now focus on more complex topics. As a first step, we’re taking a look at how we can better use pre-trained transformers to generate the environment around our articles, such as finding sources for information, generating article cover images, or other fields.\nLearn How we use machine learning to create our articles\nWe’re also looking to upgrade our content management system (CMS) to meet the increasing demands of both ourselves and our readers. Our new site therefore will run on Ghost.\nDiscover Why we are moving Aggregata from Astro to Ghost\nAs for our next article, we plan to build on our recent article on component libraries with Create a Component Library for Designers and Developers. Look out for it in the next two weeks.",
      "dc:creator": "Henrik Bartsch",
      "content": "As the second year of Aggregata draws to a close, we take the opportunity to review the changes and provide some insight into future developments.",
      "contentSnippet": "As the second year of Aggregata draws to a close, we take the opportunity to review the changes and provide some insight into future developments.",
      "guid": "67b4f0b76f69600001e8d171",
      "categories": [
        "Aggregata"
      ],
      "isoDate": "2024-10-13T22:00:00.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Define a Component Library for Designers and Developers",
      "link": "https://aggregata.de/define-a-component-library-for-designers-and-developers/",
      "pubDate": "Sun, 15 Sep 2024 22:00:00 GMT",
      "content:encoded": "<div class=\"kg-card kg-callout-card kg-callout-card-grey\"><div class=\"kg-callout-emoji\">&#x2139;&#xFE0F;</div><div class=\"kg-callout-text\">The texts in this article were partly generated by artificial intelligence and corrected and revised by us.</div></div><img src=\"https://aggregata.de/content/images/2025/02/cover-3.png\" alt=\"Define a Component Library for Designers and Developers\"><p>Once again, we delve into the intersection of design and development - this time expanding on our&#xA0;<a href=\"https://aggregata.de/develop-design-systems-with-accessibility-in-mind/\" rel=\"noreferrer\">previous discussion of design systems</a>. In this article, we will take a first look at component libraries, a crucial yet often debated approach for designers and developers alike.</p><p>Component libraries, like their counterpart, the design system, are the foundation of an organization&#x2019;s design and development process. They provide a (single) source of truth for designers and developers, ensuring consistency and efficiency across the board.</p><h2 id=\"establish-a-single-source-of-truth\">Establish a single source of truth</h2><p>Because components reside in both the design and development domains, it is essential to establish a single source of truth for both teams. This source of truth reduces the risk of inconsistencies and miscommunication between the two teams.</p><p>Establishing a single source of truth inherently struggles with the challenge of keeping design and development in sync. A coordinated approach emerges where designers and developers establish and maintain a common understanding and communication.</p><h3 id=\"communicating-and-synchronizing-changes\">Communicating and synchronizing changes</h3><h3 id=\"tools-for-bridging-the-gap\">Tools for bridging the gap</h3><p>State-of-the-art tools such as&#xA0;<a href=\"https://www.figma.com/?ref=aggregata.de\">Figma</a>&#xA0;and&#xA0;<a href=\"https://storybook.js.org/?ref=aggregata.de\">Storybook</a>&#xA0;help bridge the gap between design and development. They provide a platform for both teams to communicate and synchronize changes in a timely manner.</p><p>Both tools provide excellent coverage of the features needed to facilitate communication and synchronization of changes, and are well suited to work with their respective teams while providing a platform for collaboration and insight from other teams.</p>\n<!--kg-card-begin: html-->\n<table><thead><tr><th><strong>Figma Features</strong></th><th></th></tr></thead><tbody><tr><td><strong>Real-Time Collaboration</strong></td><td><em>Work simultaneously with other designers</em></td></tr><tr><td><strong>Design Systems</strong></td><td><em>Work across files with tokens and components</em></td></tr><tr><td><strong>Prototyping</strong></td><td><em>Build interactive prototypes to test user flows</em></td></tr><tr><td><strong>Dev Mode</strong></td><td><em>Document and hand off designs to developers</em></td></tr><tr><td><strong>Version History</strong></td><td><em>Track changes and revert to previous versions</em></td></tr></tbody></table>\n<!--kg-card-end: html-->\n<hr>\n<!--kg-card-begin: html-->\n<table><thead><tr><th><strong>Storybook Featues</strong></th><th></th></tr></thead><tbody><tr><td><strong>Isolated Development</strong></td><td><em>Develop components outside of the app</em></td></tr><tr><td><strong>Component Testing</strong></td><td><em>Simulate behavior and assert in the browser</em></td></tr><tr><td><strong>Visual Testing</strong></td><td><em>Determine UI changes visually by comparsion</em></td></tr><tr><td><strong>Documentation</strong></td><td><em>Generate automated documentation for components</em></td></tr><tr><td><strong>Extensible</strong></td><td><em>Enhance with addons for specific use cases</em></td></tr></tbody></table>\n<!--kg-card-end: html-->\n<h2 id=\"roles-in-the-process\">Roles in the process</h2><h3 id=\"design\">Design</h3><p>Designers share responsibility for conceptualizing components, keeping the system in mind while adhering to standards such as accessibility. They publish components and their documentation, communicate changes, and maintain and update components.</p><h3 id=\"handoff\">Handoff</h3><p>More a shared process than a role between design and development, handoff is responsible for transferring results and associated knowledge between teams in an efficient and timely manner. It is the backbone of smooth execution in both design and development.</p><h3 id=\"development\">Development</h3><p>Developers define component requirements, evaluate use cases, and review discussed concepts prior to the design process. They develop, publish, document, and maintain components across platforms and versions.</p><h2 id=\"reducing-the-friction\">Reducing the friction</h2><p>In the initial deployment of a component library, it is more than likely that both teams will encounter some sort of friction when it comes to communication and responsibilities. As part of a larger effort, it becomes a shared responsibility to reduce friction and simplify the process.</p><p>Common issues might include but not mutually exclude:</p><ul><li>Neglected communication on one or more side</li><li>Uncertainty in terms of responsibility or tasks</li><li>Synchronizing UI between design and development</li><li>Conflicting design and technical considerations</li><li>Too many or too few process requirements</li></ul><p>While you may encounter one or more of these issues, rest assured that in most cases, proper communication between teams will alleviate these transition pain points. In the end, it all adds up to a streamlined and enjoyable process for both teams.</p><h2 id=\"rinse-and-repeat\">Rinse and repeat</h2><p>Once a process is found, rinse and repeat becomes the agenda. Internalize and document the process, and identify other pain points early on in both teams to perfect the process of perfecting the process.</p><p>It may sound repetitive, but communication really is the key here. In the next article, we&#x2019;ll delve deeper into component libraries and design and develop a real-world example using the concepts described here. Stay tuned for more.</p><hr><h2 id=\"tldr\">TL;DR</h2><p>Component libraries are a cornerstone of modern design systems and will positively impact the design and development of a product. Building on solid communication between teams, managing and expanding a component library becomes a breeze.</p>",
      "content:encodedSnippet": "ℹ️\nThe texts in this article were partly generated by artificial intelligence and corrected and revised by us.\n\nOnce again, we delve into the intersection of design and development - this time expanding on our previous discussion of design systems. In this article, we will take a first look at component libraries, a crucial yet often debated approach for designers and developers alike.\nComponent libraries, like their counterpart, the design system, are the foundation of an organization’s design and development process. They provide a (single) source of truth for designers and developers, ensuring consistency and efficiency across the board.\nEstablish a single source of truth\nBecause components reside in both the design and development domains, it is essential to establish a single source of truth for both teams. This source of truth reduces the risk of inconsistencies and miscommunication between the two teams.\nEstablishing a single source of truth inherently struggles with the challenge of keeping design and development in sync. A coordinated approach emerges where designers and developers establish and maintain a common understanding and communication.\nCommunicating and synchronizing changes\nTools for bridging the gap\nState-of-the-art tools such as Figma and Storybook help bridge the gap between design and development. They provide a platform for both teams to communicate and synchronize changes in a timely manner.\nBoth tools provide excellent coverage of the features needed to facilitate communication and synchronization of changes, and are well suited to work with their respective teams while providing a platform for collaboration and insight from other teams.\n\nFigma Features\n\nReal-Time CollaborationWork simultaneously with other designers\nDesign SystemsWork across files with tokens and components\nPrototypingBuild interactive prototypes to test user flows\nDev ModeDocument and hand off designs to developers\nVersion HistoryTrack changes and revert to previous versions\n\n\nStorybook Featues\n\nIsolated DevelopmentDevelop components outside of the app\nComponent TestingSimulate behavior and assert in the browser\nVisual TestingDetermine UI changes visually by comparsion\nDocumentationGenerate automated documentation for components\nExtensibleEnhance with addons for specific use cases\n\nRoles in the process\nDesign\nDesigners share responsibility for conceptualizing components, keeping the system in mind while adhering to standards such as accessibility. They publish components and their documentation, communicate changes, and maintain and update components.\nHandoff\nMore a shared process than a role between design and development, handoff is responsible for transferring results and associated knowledge between teams in an efficient and timely manner. It is the backbone of smooth execution in both design and development.\nDevelopment\nDevelopers define component requirements, evaluate use cases, and review discussed concepts prior to the design process. They develop, publish, document, and maintain components across platforms and versions.\nReducing the friction\nIn the initial deployment of a component library, it is more than likely that both teams will encounter some sort of friction when it comes to communication and responsibilities. As part of a larger effort, it becomes a shared responsibility to reduce friction and simplify the process.\nCommon issues might include but not mutually exclude:\n\nNeglected communication on one or more side\nUncertainty in terms of responsibility or tasks\nSynchronizing UI between design and development\nConflicting design and technical considerations\nToo many or too few process requirements\n\nWhile you may encounter one or more of these issues, rest assured that in most cases, proper communication between teams will alleviate these transition pain points. In the end, it all adds up to a streamlined and enjoyable process for both teams.\nRinse and repeat\nOnce a process is found, rinse and repeat becomes the agenda. Internalize and document the process, and identify other pain points early on in both teams to perfect the process of perfecting the process.\nIt may sound repetitive, but communication really is the key here. In the next article, we’ll delve deeper into component libraries and design and develop a real-world example using the concepts described here. Stay tuned for more.\n\nTL;DR\nComponent libraries are a cornerstone of modern design systems and will positively impact the design and development of a product. Building on solid communication between teams, managing and expanding a component library becomes a breeze.",
      "dc:creator": "Jairus Joer",
      "content": "Delve into the early steps of establishing a component library for designers and developers alike, while keeping common pain points in mind.",
      "contentSnippet": "Delve into the early steps of establishing a component library for designers and developers alike, while keeping common pain points in mind.",
      "guid": "67b4f0296f69600001e8d15d",
      "categories": [
        "Web",
        "Design"
      ],
      "isoDate": "2024-09-15T22:00:00.000Z"
    },
    {
      "creator": "Jairus Joer",
      "title": "Crafting a detailed Dialog element using Microinteractions",
      "link": "https://aggregata.de/crafting-a-detailed-dialog-element-using-microinteractions/",
      "pubDate": "Sun, 01 Sep 2024 22:00:00 GMT",
      "content:encoded": "<img src=\"https://aggregata.de/content/images/2025/02/landscape-en.png\" alt=\"Crafting a detailed Dialog element using Microinteractions\"><p>In this article and the steps that follow, we&#x2019;ll create a detailed dialog modal using various CSS animation and transition properties to create more engaging microinteractions.</p><h2 id=\"the-basics\">The basics</h2><p>In its most basic form, triggering a dialog necessitates only two elements: a button to open the dialog and the&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog?ref=aggregata.de\">dialog</a>&#xA0;itself. The button is linked to the dialog by using the&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal?ref=aggregata.de\"><code>showModal()</code></a>&#xA0;method, which is a built-in method of the dialog element.</p><pre><code class=\"language-html\">&lt;div id=&quot;app&quot;&gt;\n  &lt;div id=&quot;content&quot;&gt;\n    &lt;button&gt;Open Dialog&lt;/button&gt;\n\n    &lt;dialog&gt;\n      &lt;p&gt;Hello World&lt;/p&gt;\n    &lt;/dialog&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre><pre><code class=\"language-ts\">const button = document.querySelector(&apos;button&apos;);\nconst dialog = document.querySelector(&apos;dialog&apos;);\n\nbutton.addEventListener(&apos;click&apos;, () =&gt; dialog.showModal());</code></pre><h2 id=\"styling-the-dialog\">Styling the dialog</h2><p>To make our dialog modal&#xA0;<strong>pop</strong>&#xA0;a little more, we&#x2019;ll remove the default border, add a border radius, and apply a drop shadow. Otherwise, you can treat your dialog element like any other element and style it accordingly.</p><pre><code class=\"language-css\">dialog {\n  border: unset;\n  border-radius: 0.375rem;\n  filter: drop-shadow(0 0.75rem 0.75rem #00000020);\n}</code></pre><h3 id=\"styling-the-backdrop\">Styling the backdrop</h3><p>The backdrop is the standard overlay that appears behind the dialog. You&#x2019;ll also encounter it when working with popovers. We can style it using the&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop?ref=aggregata.de\"><code>::backdrop</code></a>&#xA0;pseudo-element. In this example, we&#x2019;ll set the background color to a semi-transparent black.</p><pre><code class=\"language-css\">dialog::backdrop {\n  background-color: #00000020;\n}</code></pre><h2 id=\"adding-microinteractions\">Adding microinteractions</h2><p>Now we&#x2019;ve added a simple but very plain implementation of a dialog modal. To spice things up, we add the aforementioned microinteractions using CSS animation and transition properties to give the dialog a more engaging feel and some depth.</p><h3 id=\"setting-root-variables\">Setting root variables</h3><p>Define a&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties?ref=aggregata.de\">CSS variable</a>&#xA0;for the duration of the animation and set it to 150ms or a value of your choice. If the user prefers reduced motion, respect their preference and set the duration to a less eye-straining value or 0ms.</p><pre><code class=\"language-css\">:root {\n  --animation-duration: 150ms;\n\n  @media (prefers-reduced-motion) {\n    --animation-duration: 0ms;\n  }\n}</code></pre><h3 id=\"defining-the-animation\">Defining the animation</h3><p>For this example, we&#x2019;ll use one of the simplest animations available and fade in the dialog. We&#x2019;ll define a keyframe animation called&#xA0;<code>fade-in</code>&#xA0;that will fade the dialog in from 0% to 100% opacity.</p><pre><code class=\"language-css\">@keyframes fade-in {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opactiy: 1;\n  }\n}</code></pre><pre><code class=\"language-css\">dialog {\n  animation: fade-in var(--animation-duration) ease-out both;\n\n  &amp;::backdrop {\n    animation: fade-in var(--animation-duration) ease-out both;\n  }\n}</code></pre><h3 id=\"adding-depth-with-transformations\">Adding depth with transformations</h3><p>To give the dialog a sense of depth, we&#x2019;ll apply a perspective transformation to the&#xA0;<code>#app</code>&#xA0;element. This will bring the dialog into the foreground, while the&#xA0;<code>#app</code>&#xA0;element will fade into the background and its&#xA0;<code>#content</code>&#xA0;will become blurred.</p><blockquote>Note, that we&#x2019;ve employed&#xA0;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion?ref=aggregata.de\"><code>@media (prefers-reduced-motion: no-preference)</code></a>&#xA0;to only apply the perspective change, if the user has not set their preference to reduced motion.</blockquote><pre><code class=\"language-css\">body {\n  background: #eee;\n\n  &amp;:has(dialog[open]) {\n    overflow: hidden;\n\n    @media (prefers-reduced-motion: no-preference) {\n      #app {\n        border-radius: 0.75rem;\n        filter: drop-shadow(0 0.75rem 0.75rem #00000020);\n        overflow: hidden;\n        transform: perspective(100vw) translateZ(-3rem);\n      }\n    }\n\n    #content {\n      filter: blur(0.125rem);\n    }\n  }\n}</code></pre><h3 id=\"applying-transitions\">Applying transitions</h3><p>All that&#x2019;s left now is to apply the appropriate transition properties to the&#xA0;<code>#app</code>&#xA0;and&#xA0;<code>#content</code>&#xA0;elements to animate the transformation and filter properties accordingly. To distinguish&#xA0;<code>#app</code>&#xA0;as a layer, consider also using a dimmed background color for the&#xA0;<code>&lt;body&gt;</code>.</p><pre><code class=\"language-css\">#app,\n#content {\n  transition-property: transform, filter, border-radius;\n  transition-duration: var(--animation-duration);\n  transition-timing-function: ease-out;\n}</code></pre><pre><code class=\"language-css\">#app {\n  background: #fff;\n}</code></pre><h2 id=\"result\">Result</h2><p><strong>And that&#x2019;s it</strong>&#xA0;&#x1F389; You&#x2019;ve just implemented a nicely animated dialog modal into your page, respecting user preferences and using standard and common techniques and tools.</p><hr><h2 id=\"tldr\">TL;DR</h2><p>Learn how to create a detailed dialog modal using microinteractions. We&#x2019;ll cover the basics, styling the dialog, adding microinteractions, and applying transitions properly.</p>",
      "content:encodedSnippet": "In this article and the steps that follow, we’ll create a detailed dialog modal using various CSS animation and transition properties to create more engaging microinteractions.\nThe basics\nIn its most basic form, triggering a dialog necessitates only two elements: a button to open the dialog and the dialog itself. The button is linked to the dialog by using the showModal() method, which is a built-in method of the dialog element.\n<div id=\"app\">\n  <div id=\"content\">\n    <button>Open Dialog</button>\n\n    <dialog>\n      <p>Hello World</p>\n    </dialog>\n  </div>\n</div>\nconst button = document.querySelector('button');\nconst dialog = document.querySelector('dialog');\n\nbutton.addEventListener('click', () => dialog.showModal());\nStyling the dialog\nTo make our dialog modal pop a little more, we’ll remove the default border, add a border radius, and apply a drop shadow. Otherwise, you can treat your dialog element like any other element and style it accordingly.\ndialog {\n  border: unset;\n  border-radius: 0.375rem;\n  filter: drop-shadow(0 0.75rem 0.75rem #00000020);\n}\nStyling the backdrop\nThe backdrop is the standard overlay that appears behind the dialog. You’ll also encounter it when working with popovers. We can style it using the ::backdrop pseudo-element. In this example, we’ll set the background color to a semi-transparent black.\ndialog::backdrop {\n  background-color: #00000020;\n}\nAdding microinteractions\nNow we’ve added a simple but very plain implementation of a dialog modal. To spice things up, we add the aforementioned microinteractions using CSS animation and transition properties to give the dialog a more engaging feel and some depth.\nSetting root variables\nDefine a CSS variable for the duration of the animation and set it to 150ms or a value of your choice. If the user prefers reduced motion, respect their preference and set the duration to a less eye-straining value or 0ms.\n:root {\n  --animation-duration: 150ms;\n\n  @media (prefers-reduced-motion) {\n    --animation-duration: 0ms;\n  }\n}\nDefining the animation\nFor this example, we’ll use one of the simplest animations available and fade in the dialog. We’ll define a keyframe animation called fade-in that will fade the dialog in from 0% to 100% opacity.\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opactiy: 1;\n  }\n}\ndialog {\n  animation: fade-in var(--animation-duration) ease-out both;\n\n  &::backdrop {\n    animation: fade-in var(--animation-duration) ease-out both;\n  }\n}\nAdding depth with transformations\nTo give the dialog a sense of depth, we’ll apply a perspective transformation to the #app element. This will bring the dialog into the foreground, while the #app element will fade into the background and its #content will become blurred.\nNote, that we’ve employed @media (prefers-reduced-motion: no-preference) to only apply the perspective change, if the user has not set their preference to reduced motion.\nbody {\n  background: #eee;\n\n  &:has(dialog[open]) {\n    overflow: hidden;\n\n    @media (prefers-reduced-motion: no-preference) {\n      #app {\n        border-radius: 0.75rem;\n        filter: drop-shadow(0 0.75rem 0.75rem #00000020);\n        overflow: hidden;\n        transform: perspective(100vw) translateZ(-3rem);\n      }\n    }\n\n    #content {\n      filter: blur(0.125rem);\n    }\n  }\n}\nApplying transitions\nAll that’s left now is to apply the appropriate transition properties to the #app and #content elements to animate the transformation and filter properties accordingly. To distinguish #app as a layer, consider also using a dimmed background color for the <body>.\n#app,\n#content {\n  transition-property: transform, filter, border-radius;\n  transition-duration: var(--animation-duration);\n  transition-timing-function: ease-out;\n}\n#app {\n  background: #fff;\n}\nResult\nAnd that’s it 🎉 You’ve just implemented a nicely animated dialog modal into your page, respecting user preferences and using standard and common techniques and tools.\n\nTL;DR\nLearn how to create a detailed dialog modal using microinteractions. We’ll cover the basics, styling the dialog, adding microinteractions, and applying transitions properly.",
      "dc:creator": "Jairus Joer",
      "content": "Over the past few weeks I've been experimenting with the Dialog element and the new Popover API and dabbled with some microinteractions to make every click a little more engaging.",
      "contentSnippet": "Over the past few weeks I've been experimenting with the Dialog element and the new Popover API and dabbled with some microinteractions to make every click a little more engaging.",
      "guid": "67b4ef896f69600001e8d148",
      "categories": [
        "Web",
        "Design",
        "Javascript"
      ],
      "isoDate": "2024-09-01T22:00:00.000Z"
    }
  ],
  "feedUrl": "https://aggregata.de/authors/jairusjoer/rss/",
  "image": {
    "link": "https://aggregata.de/",
    "url": "https://aggregata.de/favicon.png",
    "title": "Jairus Joer - Aggregata"
  },
  "paginationLinks": {
    "self": "https://aggregata.de/authors/jairusjoer/rss/"
  },
  "title": "Jairus Joer - Aggregata",
  "description": "We write about current software and standards.",
  "generator": "Ghost 6.0",
  "link": "https://aggregata.de/",
  "lastBuildDate": "Sat, 13 Sep 2025 12:07:05 GMT",
  "ttl": "60"
}